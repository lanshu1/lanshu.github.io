<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Antd的Select如何设置对内容能够筛选 （不是value）</title>
      <link href="/post/2d396c73.html"/>
      <url>/post/2d396c73.html</url>
      
        <content type="html"><![CDATA[<p>Select组件是按照筛选项的value来筛选的，而我们需要的是按照筛选项的显示的内容来筛选, 这时候该如何设置呢。<strong>optionFilterProp=”children”</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a-form-item</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:colon</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label</span>=<span class="string">"入职公司"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a-select</span></span></span><br><span class="line"><span class="tag">        <span class="attr">allowClear</span></span></span><br><span class="line"><span class="tag">        <span class="attr">showSearch</span> // 是否支持搜索</span></span><br><span class="line"><span class="tag">        <span class="attr">optionFilterProp</span>=<span class="string">"children"</span> // *把搜索的<span class="attr">value</span>换成<span class="attr">children</span></span></span><br><span class="line"><span class="tag">        <span class="attr">placeholder</span>=<span class="string">"请选择"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">size</span>=<span class="string">"small"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:labelInValue</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-decorator</span>=<span class="string">"['companyCode',&#123;rules: [&#123; required: true, message: '请选择入职公司!' &#125;]&#125;]"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a-select-option</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:key</span>=<span class="string">"index"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:value</span>=<span class="string">"item.code"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-for</span>=<span class="string">"(item, index) in branchAndArea"</span></span></span><br><span class="line"><span class="tag">        &gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">a-select-option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a-select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> ant-design-vue踩过的坑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>没有在 v-if / v-if-else / v-else 中使用 key</title>
      <link href="/post/d0d99cf1.html"/>
      <url>/post/d0d99cf1.html</url>
      
        <content type="html"><![CDATA[<p>如果一组 <code>v-if</code> + <code>v-else</code> 的元素类型相同，最好使用 <code>key</code> (比如两个 <code>&lt;div&gt;</code> 元素)。</p><p>默认情况下，Vue 会尽可能高效的更新 DOM。这意味着其在相同类型的元素之间切换时，会修补已存在的元素，而不是将旧的元素移除然后在同一位置添加一个新元素。如果本不相同的元素被识别为相同，则会出现意料之外的结果。</p><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-if</span>=<span class="string">"error"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">key</span>=<span class="string">"search-status"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  错误：&#123;&#123; error &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-else</span></span></span><br><span class="line"><span class="tag">  <span class="attr">key</span>=<span class="string">"search-results"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  &#123;&#123; results &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue为组件样式设置作用域（局部）</title>
      <link href="/post/d0e1e15a.html"/>
      <url>/post/d0e1e15a.html</url>
      
        <content type="html"><![CDATA[<p>对于应用来说，顶级 App 组件和布局组件中的样式可以是全局的，但是其它所有组件都应该是有作用域的。<code>scoped</code> 特性可以使css局部作用域，不受外界影响，不止要使用 <code>scoped</code> 特性，使用唯一的 class 名可以帮你确保那些三方库的 CSS 不会运用在你自己的 HTML 上。</p><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button button-close"</span>&gt;</span>X<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用 `scoped` 特性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.button</span> &#123;</span></span><br><span class="line">  border: none;</span><br><span class="line">  border-radius: 2px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.button-close</span> &#123;</span></span><br><span class="line">  background-color: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>避免 v-if 和 v-for 用在一起</title>
      <link href="/post/5fcc2b62.html"/>
      <url>/post/5fcc2b62.html</url>
      
        <content type="html"><![CDATA[<p>永远不要把 v-if 和 v-for 同时用在同一个元素上。</p><p>一般我们在两种常见的情况下会倾向于这样做：</p><ul><li>为了过滤一个列表中的项目 (比如 <code>v-for=&quot;user in users&quot; v-if=&quot;user.isActive&quot;</code> )。在这种情形下，请将 <code>users</code> 替换为一个计算属性 (比如 <code>activeUsers</code>)，让其返回过滤后的列表。</li></ul><ul><li>比如 <code>v-for=&quot;user in users&quot; v-if=&quot;shouldShowUsers&quot;</code>。这种情形下，请<code>v-if</code> 移动至容器元素上 (比如 <code>ul, ol</code>)。</li></ul><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-for</span>=<span class="string">"user in activeUsers"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:key</span>=<span class="string">"user.id"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    &#123;&#123; user.name &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  activeUsers: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.users.filter(<span class="function"><span class="keyword">function</span> (<span class="params">user</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> user.isActive</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们将会获得如下好处：</p><ul><li><p>过滤后的列表只会在 <code>users</code> 数组发生相关变化时才被重新运算，过滤更高效。</p></li><li><p>使用 <code>v-for=&quot;user in activeUsers&quot;</code> 之后，我们在渲染的时候只遍历活跃用户，渲染更高效。</p></li><li><p>解耦渲染层的逻辑，可维护性 (对逻辑的更改和扩展) 更强。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue使用.env文件配置全局环境变量</title>
      <link href="/post/4641e06a.html"/>
      <url>/post/4641e06a.html</url>
      
        <content type="html"><![CDATA[<p>关于文件名：必须以如下方式命名，不要乱起名，也无需专门手动控制加载哪个文件</p><p>.env 全局默认配置文件，不论什么环境都会加载合并</p><p>.env.development 开发环境下的配置文件</p><p>.env.production 生产环境下的配置文件</p><a id="more"></a><p>注意：属性名必须以VUE_APP_开头，比如VUE_APP_XXX</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; .env</span><br><span class="line"></span><br><span class="line">NODE_ENV&#x3D;production</span><br><span class="line">VUE_APP_API_URL&#x3D;&#x2F;api</span><br><span class="line">VUE_APP_IMG_URL&#x3D;&#x2F;</span><br><span class="line">VUE_APP_ENV&#x3D;production</span><br><span class="line">VUE_APP_FAVICON&#x3D;favicon.ico</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; .env.development</span><br><span class="line"></span><br><span class="line">NODE_ENV&#x3D;development</span><br><span class="line"></span><br><span class="line">VUE_APP_API_URL&#x3D;&#x2F;api</span><br><span class="line">VUE_APP_IMG_URL&#x3D;&#x2F;</span><br><span class="line"></span><br><span class="line">VUE_APP_FAVICON&#x3D;favicon-test.ico</span><br></pre></td></tr></table></figure><p>关于文件的加载：</p><p>根据启动命令vue会自动加载对应的环境，vue是根据文件名进行加载的，所以上面说“不要乱起名，也无需专门控制加载哪个文件”</p><p>比如执行npm run serve命令，会自动加载.env.development文件，打印process.env属性（全局属性，任何地方均可使用）</p><p><img src="/post/4641e06a/vue_twelve.png" alt></p><p>可见NODE_ENV被改为了development，覆盖掉了.env中的全局属性</p><p>.env中的全局属性NODE_ENV、VUE_APP_URL被覆盖，</p><p>.env中的全局属性VUE_APP_PREVIEW、VUE_APP_DEFAULT_PARAM被保留</p><p>如果你想要在构建命令中使用开发环境变量，请在你的 package.json 脚本中加入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;dev-build&quot;: &quot;vue-cli-service build --mode development&quot;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中路由在新的标签页打开</title>
      <link href="/post/635b6b47.html"/>
      <url>/post/635b6b47.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> routeData = <span class="keyword">this</span>.$router.resolve(&#123;</span><br><span class="line">    name: <span class="string">'commercialPreview'</span>,</span><br><span class="line">    query: &#123;<span class="attr">cylType</span>: <span class="keyword">this</span>.$route.query.cylType&#125;,</span><br><span class="line">    params: &#123; <span class="attr">id</span>: <span class="keyword">this</span>.id &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">window</span>.open(routeData.href, <span class="string">'_blank'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue的计算属性computed</title>
      <link href="/post/7e77297b.html"/>
      <url>/post/7e77297b.html</url>
      
        <content type="html"><![CDATA[<h3 id="vue的计算属性用于简单运算，在模版中太多的逻辑会难以维护，例如"><a href="#vue的计算属性用于简单运算，在模版中太多的逻辑会难以维护，例如" class="headerlink" title="vue的计算属性用于简单运算，在模版中太多的逻辑会难以维护，例如:"></a>vue的计算属性用于简单运算，在模版中太多的逻辑会难以维护，例如:</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></span><br><span class="line">  &#123;&#123; message.split('').reverse().join('') &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个地方逻辑是字符串反转，如果多次使用会造成不好维护的现象，而且逻辑代码写在模版里可读性并不是很好。</p><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Original message: "&#123;&#123; message &#125;&#125;"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Computed reversed message: "&#123;&#123; reversedMessage &#125;&#125;"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#example'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">'Hello'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    <span class="comment">// 计算属性的 getter</span></span><br><span class="line">    reversedMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// `this` 指向 vm 实例</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>有的人会说在methods里写个方法在模版里调用也是可以的，跟计算属性没什么区别，但我要说的是实现结果是一样的，但是计算属性是把值存储在缓存里，当值不发生改变的时候取得是缓存的值，而函数调用每次都会执行，性能优化并不是很好，所以极力推荐使用计算属性。</p><h3 id="计算属性的setter"><a href="#计算属性的setter" class="headerlink" title="计算属性的setter"></a>计算属性的setter</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// ...</span><br><span class="line">computed: &#123;</span><br><span class="line">  fullName: &#123;</span><br><span class="line">    // getter</span><br><span class="line">    get: function () &#123;</span><br><span class="line">      return this.firstName + ' ' + this.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    // setter</span><br><span class="line">    set: function (newValue) &#123;</span><br><span class="line">      var names = newValue.split(' ')</span><br><span class="line">      this.firstName = names[0]</span><br><span class="line">      this.lastName = names[names.length - 1]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// ...</span><br></pre></td></tr></table></figure><p>现在再运行 vm.fullName = ‘John Doe’ 时，setter 会被调用，vm.firstName 和 vm.lastName 也会相应地被更新。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序自定义组件</title>
      <link href="/post/43f56f31.html"/>
      <url>/post/43f56f31.html</url>
      
        <content type="html"><![CDATA[<p>1.首先在根目录新建components目录，然后在components下创建组件</p><a id="more"></a><p><img src="/post/43f56f31/weixin_three.png" alt></p><p>2.新建组件之后再需要引入的地方引用例如在pages下的classic里引用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//classic.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"usingComponents"</span>: &#123;</span><br><span class="line">    <span class="string">"v-like"</span>:<span class="string">"/components/like/index"</span>   <span class="comment">//键名是可以自定义的，为组件的名字</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//classic.wxml</span></span><br><span class="line">&lt;v-like /&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序rpx单位</title>
      <link href="/post/44e2a489.html"/>
      <url>/post/44e2a489.html</url>
      
        <content type="html"><![CDATA[<p>首先我们通常用的是px单位，那么我们知道px适用于pc端，那么如果px用到小程序或者移动端显示效果都不是很精确，所有我们小程序使用的是rpx单位，那么有什么区别吗？rpx单位支持自适应，也就是说无论多大尺寸的屏幕都会保持做原始的大小，会随着屏幕而改变，那px就不同了，他的大小是rpx的两倍，且不说在小程序上不自适应，反而会显得很大，不是我们想要的大小，我们需要手动的去除以2来进行换算。但有些情况我们也是会使用到px的，比如不需要自适应的东西，就可以使用px。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序组建通信</title>
      <link href="/post/2f44a81e.html"/>
      <url>/post/2f44a81e.html</url>
      
        <content type="html"><![CDATA[<p>子组件传递父组件需要用到triggerEvent方法，当子组件（自定义组件）点击button的时候调用triggerEvent方法传递一些数据，首先第一个属性为自定义名称（myevent）对应父组件（bind:myevent）名字是个标识必须相同，第二个参数就是要传递的数据，第三个参数是一些配置具体参考 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/events.html">https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/events.html</a>。父组件bind:myevent=”onMyEvent”事件绑定，通过e.detail.count来获取数据。</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件，引用component-tag-name</span></span><br><span class="line">&lt;component-tag-name bind:myevent=<span class="string">"onMyEvent"</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//index.js</span></span><br><span class="line">Component(&#123;</span><br><span class="line">    onMyEvent(e) &#123;</span><br><span class="line">        e.detail.count <span class="comment">// 自定义组件触发事件时提供的detail对象，结果为1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//子组件</span></span><br><span class="line">&lt;button bindtap=<span class="string">"onTap"</span>&gt;点击这个按钮将触发“myevent”事件&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/index.js</span></span><br><span class="line"><span class="regexp">Component(&#123;</span></span><br><span class="line"><span class="regexp">  properties: &#123;&#125;,</span></span><br><span class="line"><span class="regexp">  methods: &#123;</span></span><br><span class="line"><span class="regexp">    onTap() &#123;</span></span><br><span class="line"><span class="regexp">      const myEventDetail = &#123;count:1&#125; /</span><span class="regexp">/ detail对象，提供给事件监听函数</span></span><br><span class="line"><span class="regexp">      const myEventOption = &#123;&#125; /</span><span class="regexp">/ 触发事件的选项</span></span><br><span class="line"><span class="regexp">      this.triggerEvent('myevent', myEventDetail, myEventOption)</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript错误类型</title>
      <link href="/post/4e3a5907.html"/>
      <url>/post/4e3a5907.html</url>
      
        <content type="html"><![CDATA[<p>ECMA-262 定义了下列 7 种错误类型，简单说明如下：</p><ul><li>Error：普通异常。通常与 throw 语句和 try／catch 语句一起使用。 利用属性 name 可以声明或了 解异常的类型，利用 message 属性可以设置和读取异常的详细信息。</li><li>EvalError： 在不正确使用 eval（）方法时抛出。</li><li>SyntaxError：抛出语法错误。</li><li>RangeError：在数字超出合法范围时抛出。</li><li>ReferenceError：在读取不存在的变量时抛出 。</li><li>TypeError：当一个值的类型错误时抛出该异常。</li><li>URLError：由 URL 的编码和解码方法抛出。</li></ul><a id="more"></a><p>其中 Error 是基类，其他错误类型都继承自该类型。因此，所有错误类型共享了一组相同的属性， 错误对象中的方法全是默认的对象方法。 Error 类型的错误很少见，如果有也是浏览器抛出的，这个基类 型的主要目的是供开发人员抛出自定义错误。 </p><p>EvalError 类型的错误会在使用 eval（）函数发生异常时被抛出。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果没有把 eval（）当成函数调用，就会抛出该类型错误。</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">eval</span>();         <span class="comment">//抛出 EvalError</span></span><br><span class="line"><span class="built_in">eval</span>=foo;           <span class="comment">//抛出 EvalError</span></span><br></pre></td></tr></table></figure><p>RangeError 类型的错误会在数值超出相应范围时触发。 JavaScript 中经常会出现这种范围错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在定义数组时，如果指定了数组不支持的项数，如－20 或 Number.MAX VALUE，就会 触发这种错误。</span></span><br><span class="line"><span class="keyword">var</span> itemsl = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">-20</span>);                 <span class="comment">//抛出RangeError</span></span><br><span class="line"><span class="keyword">var</span> itemsl = <span class="keyword">new</span> <span class="built_in">Array</span> (<span class="built_in">Number</span>.MAX_VALUE);   <span class="comment">//抛出RangeError</span></span><br></pre></td></tr></table></figure><p>在找不到对象的情况下，会发生 ReferenceError。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在访问不存在的变量时，就会发生这种错误。</span></span><br><span class="line"><span class="keyword">var</span> obj = x;          <span class="comment">//在 x 并未声明的情况下抛出 ReferenceError</span></span><br></pre></td></tr></table></figure><p>SyntaxError 表示语法类型错误， 当把语法错误的 JavaScript 字符串传入 eval（）函数时，就会导致此类错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span> (<span class="string">"a ++ b"</span>)         <span class="comment">//抛出 SyntaxError</span></span><br></pre></td></tr></table></figure><p>Type Error类型在 JavaScript 中会经常用到，在变量中保存着意外的类型时，或者在访问不存在的方法时，都会导致这种错误。错误的原因虽然多种多样，但归根结底还是由于在执行特定类型的操作时， 变量的类型并不符合要求所致。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最常发生类型错误的情况，就是传递给函数的参数事先未经检查，结果传入类型与预期类型不相符。 </span></span><br><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="number">10</span>;                             <span class="comment">//抛出 TypeError </span></span><br><span class="line">alert (<span class="string">"name"</span> <span class="keyword">in</span> <span class="literal">true</span>);                     <span class="comment">//抛出 TypeError </span></span><br><span class="line"><span class="built_in">Function</span>.prototype.toString.call (’name ’); <span class="comment">//抛出 TypeError</span></span><br></pre></td></tr></table></figure><p>在使用 encodeURL（）或 decodeURL（）时，如果 URL 格式不正确，就会导致 URIError 错误。这种错误也很少见，因为这两个函数的容错性非常高。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 try-catch</title>
      <link href="/post/5d2f66fe.html"/>
      <url>/post/5d2f66fe.html</url>
      
        <content type="html"><![CDATA[<p>ECMA-262 第 3 版引入了 try-catch 语旬，当 try-catch 语句中发生错误时， 浏览器会认为错误已经被处理了 ，因而不会报告错误。对于那些不要求用户懂技术，也不需要用户理解错误的 Web 应用程序，这应该说是个理想的结果。不过try-catch 能够让我们实现自己的错误处理机制。使用 try-catch 最适合处理那些无法控制的错误。假设在使用一个大型 JavaScript 库中的函数，该函 数可能会有意无意地抛出一些错误，由于我们不能修改这个库的源代码，所以大可将对该函数的调用放在try-catch语句当中，万一有什么错误发生，也好恰当地处理它们。 在明明白白地知道自己的代码会发生错误时，再使用try-catch语句就不太合适了。例如，如果传递给函数的参数是字符串而非数值，就会造成函数出错，那么就应该先检查参数的类型，然后再决定如何去做。在这种情况下，不应使用try-catch语句。作为 JavaScript 处理异常的一种标准方式。基本语法如下：</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123; </span><br><span class="line">    <span class="comment">//可能会导致错误的代码 </span></span><br><span class="line">&#125; <span class="keyword">catch</span>(error) &#123; </span><br><span class="line">    <span class="comment">//在错误发生时怎么处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户应把所有可能会抛出错误的代码都放在 try 语句块中，而把那些用于错误处理的代码放在 catch 块中。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123; </span><br><span class="line">    a+b; </span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123; </span><br><span class="line">    alert (<span class="string">"非法的变量"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 try 块中的任何代码发生了错误，就会立即退出代码执行过程，然后接着执行 catch 块。此时， catch 块会接收到一个包含错误信息的对象。与在其他语言中不同的是，即使不使用这个错误对象，也要给它起个名字。错误对象中包含的实际信息会因浏览器而异，但都有一个保存着错误消息的 message 属性。 ECMA-262 还规定了一个保存错误类型的 name 属性，当前所有浏览器都支持这个属性（Opera 9 之前的版本不支持这个属性〉。因此，在发生错误时，就可以像下面这样实事求是地显示浏览器给出的消息。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个例子在向用户显示错误消息时，使用了错误对象的 message和name 属性。</span></span><br><span class="line"><span class="keyword">try</span> &#123; </span><br><span class="line">    a+b; </span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123; </span><br><span class="line">    alert(error.message);      <span class="comment">//错误信息</span></span><br><span class="line">    alert(error.name);         <span class="comment">//错误类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-finally"><a href="#使用-finally" class="headerlink" title="使用 finally"></a>使用 finally</h3><p>finally 子旬在 try-catch 语句中是可选的，但如果 finally 子句已经使用， 则其代码无论如何都会执行。 无论try或 catch 语句块中包含什么代码一一甚至 return 语句，都不会阻止 finally 子句的执行。只要代码中包含 finally 子旬，那么无论try还是 catch 语句块中的 return 语句都将被忽略。 因此，在使用 finally 子句之前，一定要非常清楚想让代码怎么样。看下面这个函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果提供 finally 子句，则 catch 子句就成了可选的，IE7 及更早版本中有一个bug： 除非有 catch 子句，否则 finally 中的代码永远不会执行。如果考虑兼容 IE 早期版本，应提供一个 catch 子句，哪怕里面什么都不写， IE8 修复 了这个 bug。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>; </span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123; </span><br><span class="line">        <span class="keyword">return</span> l; </span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数在位 try-catch 语句的每一部分都放了一条 return 语句。表面上看，调用这个函数会返回 2, 因为返回 2 的 return 语句位于try语句块中，而执行该语句又不会出错。可是，由于最后还有一个 finally 子句，结果就会导致该 return 语句被忽略， 也就是说，调用这个函数只能返回 0。 如果把自finally子句去掉，这个函数将返回 2。</p><h3 id="使用-throw"><a href="#使用-throw" class="headerlink" title="使用 throw"></a>使用 throw</h3><p>与问 try-catch 语句相配的还有一个 throw 操作符，用于随时抛出自定义错误。抛出错误时，必须要给 throw 操作符指定一个值，这个值是什么类型没有要求。 在遇到由 throw 操作符时，代码会立即停止执行。 仅当有 try-catch 语句捕获到被抛出的值时，代码才会继续执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下列代码都是有效的。</span></span><br><span class="line"><span class="keyword">throw</span> <span class="number">1</span>; </span><br><span class="line"><span class="keyword">throw</span> <span class="string">"hi"</span>;</span><br><span class="line"><span class="keyword">throw</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">throw</span> &#123;<span class="attr">name</span>: <span class="string">"js"</span>&#125;;</span><br></pre></td></tr></table></figure><p>通过使用某种内置错误类型，可以更真实地模拟浏览器错误。每种错误类型的构造函数接收一个参数，即实际的错误消息。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span> (<span class="string">"抛出错误"</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">SyntaxError</span>(<span class="string">"SyntaxError"</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"TypeError"</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RangeError</span>(<span class="string">"RangeError"</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">EvalError</span>(<span class="string">"EvalError"</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> URLError(<span class="string">"URLError"</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">ReferenceError</span>(<span class="string">"ReferenceError"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params">values</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">if</span> (!(values <span class="keyword">instanceof</span> <span class="built_in">Array</span>)) &#123; </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"process()：参数必须为数组。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    values.sort();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>, len=values.length; i&lt;len; i++) &#123; </span><br><span class="line">       <span class="keyword">if</span> (values[i] &gt; <span class="number">100</span>) &#123; </span><br><span class="line">            <span class="keyword">return</span> values[i];</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="错误事件"><a href="#错误事件" class="headerlink" title="错误事件"></a>错误事件</h3><p>任何没有通过句 try-catch 处理的错误都会触发 window 对象的 error 事件。这个事件是浏览器最早支持的事件之一IE、 Firefox 和 Chrome 为保持向后兼容，并没有对这个事件作任何修改， Opera 和 Safari 不支持 error 事件。 在任何 Web 浏览器中， onerror 事件处理程序都不会创建 event 对象，但它可以接收 3 个参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">message,url,line</span>)</span>&#123; </span><br><span class="line">    alert(message);     <span class="comment">//错误信息</span></span><br><span class="line">    alert(url);         <span class="comment">//错误地址</span></span><br><span class="line">    alert(line);        <span class="comment">//错误行号</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;       <span class="comment">//在事件处理程序中返回 false，可以阻止浏览器报告错误的默认行为。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过返回 false，这个函数实际上就充当了整个文档中的 try-catch 语旬，可以捕获所有无代码处理的运行时错误。这个事件处理程序是避免浏览器报告错误的最后一道防线，理想情况下，只要可能就不应该使用它。只要能够适当地使用 try-catch 语句，就不会有错误交给浏览器，也就不会触发 error 事件。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新建koa2项目</title>
      <link href="/post/abc93af2.html"/>
      <url>/post/abc93af2.html</url>
      
        <content type="html"><![CDATA[<p>1.npm install -g koa-generator</p><p>2.koa2 项目名称，如果需要ejs引擎koa2 -e 项目名称</p><p>3.cd 项目名称</p><p>4.npm install</p><p>5.npm install –update-binary</p><p>6.npm run dev</p><p>小知识点：对于start和test可以使用npm，对于dev和prd必须使用npm run来启动</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>koa中间件</title>
      <link href="/post/ee74f09a.html"/>
      <url>/post/ee74f09a.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pv</span>(<span class="params">ctx</span>)</span>&#123;</span><br><span class="line">    global.console.log(ctx.path);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">ctx,next</span>)</span>&#123;</span><br><span class="line">        pv(ctx);</span><br><span class="line">        <span class="keyword">await</span> next();    <span class="comment">//next是继续执行下面的中间件，如果不写会直接跳出，不会继续执行</span></span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.js文件</span></span><br><span class="line"><span class="keyword">const</span> pv = <span class="built_in">require</span>(<span class="string">'./middleware/koa-pv'</span>);</span><br><span class="line">app.use(pv())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>koa路由接口</title>
      <link href="/post/43948d34.html"/>
      <url>/post/43948d34.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)()</span><br><span class="line"><span class="comment">//返回一个页面</span></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  global.console.log(<span class="string">'index11111'</span>);</span><br><span class="line">  <span class="keyword">await</span> ctx.render(<span class="string">'index'</span>, &#123;    <span class="comment">//render返回一个页面</span></span><br><span class="line">    title: <span class="string">'Hello Koa 2!'</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//直接返回数据的用body，json数据</span></span><br><span class="line">router.get(<span class="string">'/json'</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  ctx.body = &#123;</span><br><span class="line">    title: <span class="string">'koa2 json'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//在不同页面为了区分接口，我们可以在加个前缀/user</span></span><br><span class="line">router.prefix(<span class="string">'/users'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.js文件</span></span><br><span class="line">app.use(index.routes(), index.allowedMethods())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nuxt写路由接口</title>
      <link href="/post/b3ca1ede.html"/>
      <url>/post/b3ca1ede.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在server/interface/city.js</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'koa-router'</span>;</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">    prefix:<span class="string">'/city'</span>    <span class="comment">//给路由添加前缀</span></span><br><span class="line">&#125;)</span><br><span class="line">router.get(<span class="string">'/list'</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    ctx.body=[<span class="string">'北京'</span>,<span class="string">'天津'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//在server/index.js</span></span><br><span class="line"><span class="keyword">import</span> cityInterface <span class="keyword">from</span> <span class="string">'./interface/city'</span></span><br><span class="line">app.use(cityInterface.routes()).use(cityInterface.allowedMethods())   <span class="comment">//固定写法</span></span><br></pre></td></tr></table></figure><p>测试一下curl <a href="http://localhost:3000/city/list">http://localhost:3000/city/list</a> 或者浏览器输入<a href="http://localhost:3000/city/list">http://localhost:3000/city/list</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nuxt服务端渲染</title>
      <link href="/post/f6e7d62a.html"/>
      <url>/post/f6e7d62a.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page"</span>&gt;</span></span><br><span class="line">    page is search</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,idx) in list"</span> <span class="attr">:key</span>=<span class="string">"idx"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  layout: <span class="string">'search'</span>,</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      list: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  <span class="keyword">async</span> asyncData()&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> &#123; status, <span class="attr">data</span>: &#123;list&#125;&#125; = <span class="keyword">await</span> axios.get(<span class="string">'http://localhost:3000/city/list'</span>)</span></span><br><span class="line">    if(status === 200)&#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line">            list</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用asyncData就是服务端渲染，computed只是浏览器的渲染刷新会有闪烁</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nuxt2.0项目创建（最新）</title>
      <link href="/post/cdd3de79.html"/>
      <url>/post/cdd3de79.html</url>
      
        <content type="html"><![CDATA[<p><img src="/post/cdd3de79/vue_five.png" alt></p><h3 id="使用import需要babel编译写法如下"><a href="#使用import需要babel编译写法如下" class="headerlink" title="使用import需要babel编译写法如下"></a>使用import需要babel编译写法如下</h3><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改1打开package.json文件</span></span><br><span class="line"><span class="string">"dev"</span>: <span class="string">"cross-env NODE_ENV=development nodemon server/index.js --watch server --exec babel-node"</span>,</span><br><span class="line"><span class="string">"start"</span>: <span class="string">"cross-env NODE_ENV=production node server/index.js --exec babel-node"</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改2在根目录创建.babelrc</span></span><br><span class="line">&#123;<span class="string">"presets"</span>: [<span class="string">"es2015"</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//安装yarn add babel-preset-es2015</span></span><br></pre></td></tr></table></figure><h3 id="项目中使用sass"><a href="#项目中使用sass" class="headerlink" title="项目中使用sass"></a>项目中使用sass</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add sass-loader node-sass</span><br></pre></td></tr></table></figure><h3 id="辅助工具安装"><a href="#辅助工具安装" class="headerlink" title="辅助工具安装"></a>辅助工具安装</h3><p>MongoDB <a href="http://www.runoob.com/mongodb/mongodb-window-install.html">http://www.runoob.com/mongodb/mongodb-window-install.html</a></p><p>redis <a href="http://www.runoob.com/redis/redis-install.html">http://www.runoob.com/redis/redis-install.html</a></p><p>数据库可视化工具 <a href="https://robomongo.org/">https://robomongo.org/</a></p><h3 id="修改nuxt-config-js"><a href="#修改nuxt-config-js" class="headerlink" title="修改nuxt.config.js"></a>修改nuxt.config.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">css: [</span><br><span class="line">    <span class="string">'element-ui/lib/theme-chalk/reset.css'</span>,</span><br><span class="line">    <span class="string">'element-ui/lib/theme-chalk/index.css'</span>,</span><br><span class="line">    <span class="comment">// '~assets/css/main.css'</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中computed的作用以及用法</title>
      <link href="/post/61a074cf.html"/>
      <url>/post/61a074cf.html</url>
      
        <content type="html"><![CDATA[<p>在vue中computed是计算属性，主要作用是把数据存储到内存中，减少不必要的请求，还可以利用computed给子组件的data赋值。</p><p>参考地址：<a href="https://www.jianshu.com/p/ff708a773dc0">https://www.jianshu.com/p/ff708a773dc0</a></p><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">navbar</span> <span class="attr">:ctype</span>=<span class="string">"ctype"</span>&gt;</span><span class="tag">&lt;/<span class="name">navbar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> navbar <span class="keyword">from</span> <span class="string">'@/components/navbar'</span></span></span><br><span class="line"><span class="javascript">   <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">       components: &#123;navbar&#125;,</span><br><span class="line">       data () &#123;</span><br><span class="line"><span class="actionscript">           <span class="keyword">return</span>&#123;</span></span><br><span class="line">               ctype:1</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 子组件</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;thistype&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    props:[<span class="string">'ctype'</span>],</span></span><br><span class="line">    computed: &#123;</span><br><span class="line"><span class="actionscript">      normalizedSize: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="keyword">this</span>.ctype.trim().toLowerCase()</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data()&#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="actionscript">            thistype:<span class="keyword">this</span>.ctype</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue组件中的.sync修饰符使用</title>
      <link href="/post/a43a7ab7.html"/>
      <url>/post/a43a7ab7.html</url>
      
        <content type="html"><![CDATA[<p>在vue的组件通信props中，一般情况下，数据都是单向的，子组件不会更改父组件的值，那么vue提供.sync作为双向传递的关键字，实现了父组件的变动会传递给子组件，而子组件的carts改变时，通过事件机制，修改父组件的cart。完成了子组件carts和父组件cart的双向映射。</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;addicon :cart.sync=<span class="string">"cart"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">addicon</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//子组件</span></span><br><span class="line">props: [<span class="string">'cart'</span>],</span><br><span class="line">data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            carts: <span class="keyword">this</span>.cart;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">    add:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.carts=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">this</span>.$emit(<span class="string">'update:cart'</span>,<span class="keyword">this</span>.carts);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中this.$set的用法</title>
      <link href="/post/cf9c7620.html"/>
      <url>/post/cf9c7620.html</url>
      
        <content type="html"><![CDATA[<p>当vue的data里边声明或者已经赋值过的对象或者数组（数组里边的值是对象）时，向对象中添加新的属性，如果更新此属性的值，是不会更新视图的。</p><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app2"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span>&#123;&#123;item.message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span> @<span class="attr">click</span>=<span class="string">"handClick()"</span>&gt;</span>更改数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">data() &#123;</span><br><span class="line"><span class="actionscript"><span class="keyword">return</span> &#123;</span></span><br><span class="line">items: [</span><br><span class="line"><span class="actionscript">&#123; message: <span class="string">"one"</span>, id: <span class="string">"1"</span> &#125;,</span></span><br><span class="line"><span class="actionscript">&#123; message: <span class="string">"two"</span>, id: <span class="string">"2"</span> &#125;,</span></span><br><span class="line"><span class="actionscript">&#123; message: <span class="string">"three"</span>, id: <span class="string">"3"</span> &#125;</span></span><br><span class="line">]</span><br><span class="line">&#125;;</span><br><span class="line">&#125;,</span><br><span class="line">mounted()&#123;</span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.items[<span class="number">0</span>]=&#123;message:<span class="string">"测试"</span>,id:<span class="string">"4"</span>&#125;; <span class="comment">//此时对象的值更改了，但是视图没有更新</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.$<span class="keyword">set</span>(<span class="keyword">this</span>.items,<span class="number">0</span>,&#123;message:<span class="string">"测试"</span>,id:<span class="string">"4"</span>&#125;)； <span class="comment">//$set可以触发更新视图</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="keyword">this</span>.items)</span></span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line"><span class="actionscript"><span class="comment">// 调用方法：Vue.set( target, key, value )</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">// target：要更改的数据源(可以是对象或者数组)</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">// key：要更改的具体数据</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">// value ：重新赋的值</span></span></span><br><span class="line">handClick() &#123;</span><br><span class="line"><span class="actionscript"><span class="comment">//Vue methods中的this 指向的是Vue的实例，这里可以直接在this中找到items</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">this</span>.$<span class="keyword">set</span>(<span class="keyword">this</span>.items, <span class="number">0</span>, &#123; message: <span class="string">"更改one的值"</span>, id: <span class="string">"0"</span> &#125;);</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typeScript进阶</title>
      <link href="/post/ab6db3b5.html"/>
      <url>/post/ab6db3b5.html</url>
      
        <content type="html"><![CDATA[<h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><p>类型别名用来给一个类型起个新名字</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Name = <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">type</span> NameResolver = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">type</span> NameOrResolver = Name | NameResolver;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">n: NameOrResolver</span>): <span class="title">Name</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> n === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="字符串字面量类型"><a href="#字符串字面量类型" class="headerlink" title="字符串字面量类型"></a>字符串字面量类型</h3><p>字符串字面量类型用来约束取值只能是某几个字符串中的一个</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> EventNames = <span class="string">'click'</span> | <span class="string">'scroll'</span> | <span class="string">'mousemove'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleEvent</span>(<span class="params">ele: Element, event: EventNames</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line">handleEvent(<span class="built_in">document</span>.getElementById(<span class="string">'hello'</span>), <span class="string">'scroll'</span>);  <span class="comment">// 没问题</span></span><br><span class="line">handleEvent(<span class="built_in">document</span>.getElementById(<span class="string">'world'</span>), <span class="string">'dbclick'</span>); <span class="comment">// 报错，event 不能为 'dbclick'</span></span><br><span class="line"><span class="comment">// index.ts(7,47): error TS2345: Argument of type '"dbclick"' is not assignable to parameter of type 'EventNames'.</span></span><br></pre></td></tr></table></figure><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><p>数组合并了相同类型的对象，而元组（Tuple）合并了不同类型的对象</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tom: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">'Tom'</span>, <span class="number">25</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">tom[<span class="number">0</span>] = <span class="string">'Tom'</span>;</span><br><span class="line">tom[<span class="number">1</span>] = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line">tom[<span class="number">0</span>].slice(<span class="number">1</span>);</span><br><span class="line">tom[<span class="number">1</span>].toFixed(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">tom[<span class="number">0</span>] = <span class="string">'Tom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">tom = [<span class="string">'Tom'</span>, <span class="number">25</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">tom = [<span class="string">'Tom'</span>];</span><br><span class="line"><span class="comment">// Property '1' is missing in type '[string]' but required in type '[string, number]'.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">tom = [<span class="string">'Tom'</span>, <span class="number">25</span>];</span><br><span class="line">tom.push(<span class="string">'male'</span>);</span><br><span class="line">tom.push(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// Argument of type 'true' is not assignable to parameter of type 'string | number'.</span></span><br></pre></td></tr></table></figure><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>TypeScript 可以使用三种访问修饰符（Access Modifiers），分别是 public、private 和 protected</p><ul><li>public 修饰的属性或方法是公有的，可以在任何地方被访问到，默认所有的属性和方法都是 public 的</li><li>private 修饰的属性或方法是私有的，不能在声明它的类的外部访问</li><li>protected 修饰的属性或方法是受保护的，它和 private 类似，区别是它在子类中也是允许被访问的</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// name 被设置为了 public，所以直接访问实例的 name 属性是允许的</span></span><br><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">public</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> Animal(<span class="string">'Jack'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a.name); <span class="comment">// Jack</span></span><br><span class="line">a.name = <span class="string">'Tom'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.name); <span class="comment">// Tom</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 很多时候，我们希望有的属性是无法直接存取的，这时候就可以用 private 了</span></span><br><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">private</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> Animal(<span class="string">'Jack'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a.name); <span class="comment">// Jack</span></span><br><span class="line">a.name = <span class="string">'Tom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(9,13): error TS2341: Property 'name' is private and only accessible within class 'Animal'.</span></span><br><span class="line"><span class="comment">// index.ts(10,1): error TS2341: Property 'name' is private and only accessible within class 'Animal'.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 private 修饰的属性或方法，在子类中也是不允许访问的，而如果是用 protected 修饰，则允许在子类中访问</span></span><br><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">protected</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Cat <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a>readonly</h4><p>只读属性关键字，只允许出现在属性声明或索引签名中</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    readonly name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> Animal(<span class="string">'Jack'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a.name); <span class="comment">// Jack</span></span><br><span class="line">a.name = <span class="string">'Tom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(10,3): TS2540: Cannot assign to 'name' because it is a read-only property.</span></span><br></pre></td></tr></table></figure><p><font color="blue">注意：如果 readonly 和其他访问修饰符同时存在的话，需要写在其后面</font></p><h4 id="类的类型"><a href="#类的类型" class="headerlink" title="类的类型"></a>类的类型</h4><p>给类加上 TypeScript 的类型很简单，与接口类似</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    sayHi(): <span class="built_in">string</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`My name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a: Animal = <span class="keyword">new</span> Animal(<span class="string">'Jack'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a.sayHi()); <span class="comment">// My name is Jack</span></span><br></pre></td></tr></table></figure><h3 id="类与接口"><a href="#类与接口" class="headerlink" title="类与接口"></a>类与接口</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Alarm &#123;</span><br><span class="line">    alert();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Light &#123;</span><br><span class="line">    lightOn();</span><br><span class="line">    lightOff();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Car <span class="keyword">implements</span> Alarm, Light &#123;</span><br><span class="line">    alert() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Car alert'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    lightOn() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Car light on'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    lightOff() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Car light off'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口继承接口"><a href="#接口继承接口" class="headerlink" title="接口继承接口"></a>接口继承接口</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Alarm &#123;</span><br><span class="line">    alert();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> LightableAlarm <span class="keyword">extends</span> Alarm &#123;</span><br><span class="line">    lightOn();</span><br><span class="line">    lightOff();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口继承类"><a href="#接口继承类" class="headerlink" title="接口继承类"></a>接口继承类</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Point &#123;</span><br><span class="line">    x: <span class="built_in">number</span>;</span><br><span class="line">    y: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Point3d <span class="keyword">extends</span> Point &#123;</span><br><span class="line">    z: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> point3d: Point3d = &#123;x: <span class="number">1</span>, y: <span class="number">2</span>, z: <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>我们在函数名后添加了 <T>，其中 T 用来指代任意输入的类型，在后面的输入 value: T 和输出 Array<T> 中即可使用了。<br>接着在调用的时候，可以指定它具体的类型为 string。当然，也可以不手动指定，而让类型推论自动推算出来</T></T></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createArray</span>&lt;<span class="title">T</span>&gt;(<span class="params">length: <span class="built_in">number</span>, value: T</span>): <span class="title">Array</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result: T[] = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        result[i] = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createArray&lt;<span class="built_in">string</span>&gt;(<span class="number">3</span>, <span class="string">'x'</span>); <span class="comment">// ['x', 'x', 'x']</span></span><br></pre></td></tr></table></figure><h4 id="多个类型参数"><a href="#多个类型参数" class="headerlink" title="多个类型参数"></a>多个类型参数</h4><p>定义泛型的时候，可以一次定义多个类型参数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>&lt;<span class="title">T</span>, <span class="title">U</span>&gt;(<span class="params">tuple: [T, U]</span>): [<span class="title">U</span>, <span class="title">T</span>] </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [tuple[<span class="number">1</span>], tuple[<span class="number">0</span>]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">swap([<span class="number">7</span>, <span class="string">'seven'</span>]); <span class="comment">// ['seven', 7]</span></span><br></pre></td></tr></table></figure><h4 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h4><p>我们可以对泛型进行约束，只允许这个函数传入那些包含 length 属性的变量</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Lengthwise &#123;</span><br><span class="line">    length: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">Lengthwise</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg.length);</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h4><p>可以使用含有泛型的接口来定义函数的形状</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> CreateArrayFunc&lt;T&gt; &#123;</span><br><span class="line">    (length: <span class="built_in">number</span>, value: T): <span class="built_in">Array</span>&lt;T&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> createArray: CreateArrayFunc&lt;<span class="built_in">any</span>&gt;;</span><br><span class="line">createArray = <span class="function"><span class="keyword">function</span>&lt;<span class="title">T</span>&gt;(<span class="params">length: <span class="built_in">number</span>, value: T</span>): <span class="title">Array</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result: T[] = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        result[i] = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createArray(<span class="number">3</span>, <span class="string">'x'</span>); <span class="comment">// ['x', 'x', 'x']</span></span><br><span class="line"></span><br><span class="line">createArray(<span class="number">3</span>, <span class="string">'x'</span>); <span class="comment">// ['x', 'x', 'x']</span></span><br></pre></td></tr></table></figure><h4 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h4><p>与泛型接口类似，泛型也可以用于类的类型定义中</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> GenericNumber&lt;T&gt; &#123;</span><br><span class="line">    zeroValue: T;</span><br><span class="line">    add: <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myGenericNumber = <span class="keyword">new</span> GenericNumber&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line">myGenericNumber.zeroValue = <span class="number">0</span>;</span><br><span class="line">myGenericNumber.add = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123; <span class="keyword">return</span> x + y; &#125;;</span><br></pre></td></tr></table></figure><h4 id="泛型参数的默认类型"><a href="#泛型参数的默认类型" class="headerlink" title="泛型参数的默认类型"></a>泛型参数的默认类型</h4><p>在 TypeScript 2.3 以后，我们可以为泛型中的类型参数指定默认类型。当使用泛型时没有在代码中直接指定类型参数，从实际值参数中也无法推测出时，这个默认类型就会起作用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createArray</span>&lt;<span class="title">T</span> = <span class="title">string</span>&gt;(<span class="params">length: <span class="built_in">number</span>, value: T</span>): <span class="title">Array</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result: T[] = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        result[i] = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> typeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typeScript理论</title>
      <link href="/post/23d050fc.html"/>
      <url>/post/23d050fc.html</url>
      
        <content type="html"><![CDATA[<h3 id="什么是类型推论"><a href="#什么是类型推论" class="headerlink" title="什么是类型推论"></a>什么是类型推论</h3><p>以下代码虽然没有指定类型，但是会在编译的时候报错：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myFavoriteNumber = <span class="string">'seven'</span>;</span><br><span class="line">myFavoriteNumber = <span class="number">7</span>;</span><br><span class="line"><span class="comment">// index.ts(2,1): error TS2322: Type 'number' is not assignable to type 'string'.</span></span><br></pre></td></tr></table></figure><p>事实上，它等价于：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myFavoriteNumber: <span class="built_in">string</span> = <span class="string">'seven'</span>;</span><br><span class="line">myFavoriteNumber = <span class="number">7</span>;</span><br><span class="line"><span class="comment">// index.ts(2,1): error TS2322: Type 'number' is not assignable to type 'string'.</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>TypeScript 会在没有明确的指定类型的时候推测出一个类型，这就是类型推论。</p><p><font color="blue">如果定义的时候没有赋值，不管之后有没有赋值，都会被推断成 any 类型而完全不被类型检查：</font></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myFavoriteNumber;</span><br><span class="line">myFavoriteNumber = <span class="string">'seven'</span>;</span><br><span class="line">myFavoriteNumber = <span class="number">7</span>;</span><br></pre></td></tr></table></figure><h3 id="访问联合类型的属性或方法"><a href="#访问联合类型的属性或方法" class="headerlink" title="访问联合类型的属性或方法"></a>访问联合类型的属性或方法</h3><p>当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们<font color="blue">只能访问此联合类型的所有类型里共有的属性或方法</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// length 不是 string 和 number 的共有属性，所以会报错。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>(<span class="params">something: string | number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> something.length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// index.ts(2,22): error TS2339: Property 'length' does not exist on type 'string | number'.</span></span><br><span class="line"><span class="comment">//   Property 'length' does not exist on type 'number'.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问 string 和 number 的共有属性是没问题的：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getString</span>(<span class="params">something: string | number</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> something.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> typeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typeScript基础</title>
      <link href="/post/48765c6b.html"/>
      <url>/post/48765c6b.html</url>
      
        <content type="html"><![CDATA[<h3 id="定义变量限制类型"><a href="#定义变量限制类型" class="headerlink" title="定义变量限制类型"></a>定义变量限制类型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isDone: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> decLiteral: <span class="built_in">number</span> = <span class="number">6</span></span><br><span class="line"><span class="keyword">let</span> sentence: <span class="built_in">string</span> = <span class="string">`Hello, my name is <span class="subst">$&#123;myName&#125;</span>`</span></span><br><span class="line"><span class="keyword">let</span> myFavoriteNumber: <span class="built_in">any</span> = <span class="string">'seven'</span>;  <span class="comment">// 如果是 any 类型，则允许被赋值为任意类型</span></span><br><span class="line"><span class="keyword">let</span> myFavoriteNumber: <span class="built_in">string</span> | <span class="built_in">number</span>; <span class="comment">// 联合类型（Union Types）表示取值可以为多种类型中的一种</span></span><br><span class="line"><span class="keyword">let</span> fibonacci: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]; <span class="comment">// 最简单的方法是使用「类型 + 方括号」来表示数组</span></span><br><span class="line"><span class="keyword">let</span> fibonacci: (<span class="built_in">number</span> | <span class="built_in">string</span>)[] = [<span class="number">1</span>, <span class="string">'1'</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]; <span class="comment">// 添加多个类型</span></span><br><span class="line"><span class="keyword">let</span> fibonacci: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]; <span class="comment">// 数组泛型</span></span><br><span class="line"><span class="keyword">let</span> list: <span class="built_in">any</span>[] = [<span class="string">'xcatliu'</span>, <span class="number">25</span>, &#123; website: <span class="string">'http://xcatliu.com'</span> &#125;]; <span class="comment">// 一个比较常见的做法是，用 any 表示数组中允许出现任意类型</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>注意：使用构造函数 Boolean 创造的对象不是布尔值： </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> createdByNewBoolean: <span class="built_in">boolean</span> = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// Type 'Boolean' is not assignable to type 'boolean'.</span></span><br><span class="line"><span class="comment">//   'boolean' is a primitive, but 'Boolean' is a wrapper object. Prefer using 'boolean' when possible.</span></span><br></pre></td></tr></table></figure><h3 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h3><p>JavaScript 没有空值（Void）的概念，在 TypeScript 中，可以用 void 表示没有任何返回值的函数：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">alertName</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    alert(<span class="string">'My name is Tom'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明一个 void 类型的变量没有什么用，因为你只能将它赋值为 undefined 和 null：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> unusable: <span class="built_in">void</span> = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><h3 id="对象类型–接口"><a href="#对象类型–接口" class="headerlink" title="对象类型–接口"></a>对象类型–接口</h3><p>在 TypeScript 中，我们使用接口（Interfaces）来定义对象的类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在定义的变量比接口少了一些属性或多一些属性是不允许的，赋值的时候，变量的形状必须和接口的形状保持一致。</span></span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line">    name: <span class="string">'Tom'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// index.ts(6,5): error TS2322: Type '&#123; name: string; &#125;' is not assignable to type 'Person'.</span></span><br><span class="line"><span class="comment">//   Property 'age' is missing in type '&#123; name: string; &#125;'.</span></span><br></pre></td></tr></table></figure><h4 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h4><p>有时我们希望不要完全匹配一个形状，那么可以用可选属性：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line">    name: <span class="string">'Tom'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="任意属性"><a href="#任意属性" class="headerlink" title="任意属性"></a>任意属性</h4><p>有时候我们希望一个接口允许有任意的属性，可以使用如下方式：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">    [propName: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line">    name: <span class="string">'Tom'</span>,</span><br><span class="line">    gender: <span class="string">'male'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要注意的是，一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集：</span></span><br><span class="line"><span class="comment">// 任意属性的值允许是 string，但是可选属性 age 的值却是 number，number 不是 string 的子属性，所以报错了</span></span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">    [propName: <span class="built_in">string</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line">    name: <span class="string">'Tom'</span>,</span><br><span class="line">    age: <span class="number">25</span>,</span><br><span class="line">    gender: <span class="string">'male'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// index.ts(3,5): error TS2411: Property 'age' of type 'number' is not assignable to string index type 'string'.</span></span><br><span class="line"><span class="comment">// index.ts(7,5): error TS2322: Type '&#123; [x: string]: string | number; name: string; age: number; gender: string; &#125;' is not assignable to type 'Person'.</span></span><br><span class="line"><span class="comment">//   Index signatures are incompatible.</span></span><br><span class="line"><span class="comment">//     Type 'string | number' is not assignable to type 'string'.</span></span><br><span class="line"><span class="comment">//       Type 'number' is not assignable to type 'string'.</span></span><br></pre></td></tr></table></figure><h4 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h4><p>有时候我们希望对象中的一些字段只能在创建的时候被赋值，那么可以用 readonly 定义只读属性：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    readonly id: <span class="built_in">number</span>;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">    [propName: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tom: Person = &#123;</span><br><span class="line">    id: <span class="number">89757</span>,</span><br><span class="line">    name: <span class="string">'Tom'</span>,</span><br><span class="line">    gender: <span class="string">'male'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">tom.id = <span class="number">9527</span>;</span><br><span class="line"><span class="comment">// index.ts(14,5): error TS2540: Cannot assign to 'id' because it is a constant or a read-only property.</span></span><br></pre></td></tr></table></figure><h3 id="数组类型–接口"><a href="#数组类型–接口" class="headerlink" title="数组类型–接口"></a>数组类型–接口</h3><p>虽然接口也可以用来描述数组，但是我们一般不会这么做，因为这种方式比前两种方式复杂多了。不过有一种情况例外，那就是它常用来表示类数组。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NumberArray 表示：只要索引的类型是数字时，那么值的类型必须是数字。</span></span><br><span class="line"><span class="keyword">interface</span> NumberArray &#123;</span><br><span class="line">    [index: <span class="built_in">number</span>]: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fibonacci: NumberArray = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure><h4 id="类数组"><a href="#类数组" class="headerlink" title="类数组"></a>类数组</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> args: IArguments = <span class="built_in">arguments</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 IArguments 是 TypeScript 中定义好了的类型，它实际上就是：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IArguments &#123;</span><br><span class="line">    [index: <span class="built_in">number</span>]: <span class="built_in">any</span>;</span><br><span class="line">    length: <span class="built_in">number</span>;</span><br><span class="line">    callee: <span class="built_in">Function</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><p>一个函数有输入和输出，要在 TypeScript 中对其进行约束，需要把输入和输出都考虑到，其中函数声明的类型定义较简单：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mySum = <span class="function"><span class="keyword">function</span> (<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> tomcat = buildName(<span class="string">'Tom'</span>, <span class="string">'Cat'</span>);</span><br><span class="line"><span class="keyword">let</span> tom = buildName(<span class="string">'Tom'</span>);</span><br></pre></td></tr></table></figure><h4 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h4><p>与接口中的可选属性类似，我们用 ? 表示可选的参数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName?: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lastName) &#123;</span><br><span class="line">        <span class="keyword">return</span> firstName + <span class="string">' '</span> + lastName;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> firstName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName: <span class="built_in">string</span> = 'Cat'</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">' '</span> + lastName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> tomcat = buildName(<span class="string">'Tom'</span>, <span class="string">'Cat'</span>);</span><br><span class="line"><span class="keyword">let</span> tom = buildName(<span class="string">'Tom'</span>);</span><br></pre></td></tr></table></figure><h3 id="定义函数的形状–接口"><a href="#定义函数的形状–接口" class="headerlink" title="定义函数的形状–接口"></a>定义函数的形状–接口</h3><p>我们也可以使用接口的方式来定义一个函数需要符合的形状：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> SearchFunc &#123;</span><br><span class="line">    (source: <span class="built_in">string</span>, subString: <span class="built_in">string</span>): <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mySearch: SearchFunc;</span><br><span class="line">mySearch = <span class="function"><span class="keyword">function</span>(<span class="params">source: <span class="built_in">string</span>, subString: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> source.search(subString) !== <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><p>类型断言（Type Assertion）可以用来手动指定一个值的类型。</p><p>有时候，我们确实需要在还不确定类型的时候就访问其中一个类型的属性或方法，比如：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>(<span class="params">something: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (something.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> something.length;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> something.toString().length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// index.ts(2,19): error TS2339: Property 'length' does not exist on type 'string | number'.</span></span><br><span class="line"><span class="comment">//   Property 'length' does not exist on type 'number'.</span></span><br><span class="line"><span class="comment">// index.ts(3,26): error TS2339: Property 'length' does not exist on type 'string | number'.</span></span><br><span class="line"><span class="comment">//   Property 'length' does not exist on type 'number'.</span></span><br></pre></td></tr></table></figure><p>上例中，获取 something.length 的时候会报错。</p><p>此时可以使用类型断言，将 something 断言成 string：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>(<span class="params">something: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((&lt;<span class="built_in">string</span>&gt;something).length) &#123;</span><br><span class="line">        <span class="keyword">return</span> (&lt;<span class="built_in">string</span>&gt;something).length;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> something.toString().length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="blue">注意：类型断言不是类型转换，断言成一个联合类型中不存在的类型是不允许的</font></p><h3 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h3><p>我们可以在 TypeScript 中将变量定义为这些类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b: <span class="built_in">Boolean</span> = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> e: <span class="built_in">Error</span> = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Error occurred'</span>);</span><br><span class="line"><span class="keyword">let</span> d: <span class="built_in">Date</span> = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> r: <span class="built_in">RegExp</span> = <span class="regexp">/[a-z]/</span>;</span><br><span class="line"><span class="keyword">let</span> body: HTMLElement = <span class="built_in">document</span>.body;</span><br><span class="line"><span class="keyword">let</span> allDiv: NodeList = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>);</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e: MouseEvent</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Do something</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="安装typeScript的npm包"><a href="#安装typeScript的npm包" class="headerlink" title="安装typeScript的npm包"></a>安装typeScript的npm包</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @types/node --save-dev</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> typeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建react开发环境</title>
      <link href="/post/968d7123.html"/>
      <url>/post/968d7123.html</url>
      
        <content type="html"><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>1.下载node.js <a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a> 推荐下载长期支持的版本</p><p>2.下载cnpm <a href="https://jingyan.baidu.com/article/9080802239521cfd90c80f55.html">https://jingyan.baidu.com/article/9080802239521cfd90c80f55.html</a></p><h3 id="开始生成项目环境"><a href="#开始生成项目环境" class="headerlink" title="开始生成项目环境"></a>开始生成项目环境</h3><p>1.运行 cnpm install -g create-react-app</p><p>2.create-react-app todolist（文件名）</p><p>3.cd todolist（进入项目文件）</p><p>4.npm run start（启动项目）</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react中Fragment组件</title>
      <link href="/post/b8e6111e.html"/>
      <url>/post/b8e6111e.html</url>
      
        <content type="html"><![CDATA[<p>什么是Fragment？在我们定义组件的时候return里最外层包裹的div往往不想渲染到页面，那么就要用到我们的Fragment组件了，具体使用如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, Fragment &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoList</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">         &lt;Fragment&gt;</span><br><span class="line">            &lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> /&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;学习react&lt;li/&gt;</span><br><span class="line">                &lt;li&gt;Learning React&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/u</span>l&gt;</span><br><span class="line">         &lt;Fragment/&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> TodoList</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react中state与setstate的使用</title>
      <link href="/post/9f19373f.html"/>
      <url>/post/9f19373f.html</url>
      
        <content type="html"><![CDATA[<p>我们可以利用state来定义一些变量的初始值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//放在construcor里</span></span><br><span class="line"><span class="keyword">this</span>.state = &#123;</span><br><span class="line">    list: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>要更改state里的值，注意要遵循react里immutable规范，state不允许我们做任何改变，只能通过setState来更改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [...this.state.list];</span><br><span class="line">list.splice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">this</span>.setState(&#123;<span class="attr">list</span>:list&#125;);</span><br></pre></td></tr></table></figure><p>强烈推荐setstate的写法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [...this.state.list];</span><br><span class="line">list.splice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">this</span>.setState(<span class="function">(<span class="params">prevState</span>) =&gt;</span> (&#123;   <span class="comment">//外面加小括号可以代替return</span></span><br><span class="line">    list: list</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>还可以这样写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.setState(<span class="function">(<span class="params">prevState</span>) =&gt;</span> &#123;   <span class="comment">//外面加小括号可以代替return</span></span><br><span class="line">    <span class="keyword">const</span> list = [...prevState.list];</span><br><span class="line">    list.splice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123;list&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>setState第二个参数回调函数，在setState设置完之后执行，可以对改变后的数据进行操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.setState(<span class="function">(<span class="params">prevState</span>) =&gt;</span> &#123;   <span class="comment">//外面加小括号可以代替return</span></span><br><span class="line">    <span class="keyword">const</span> list = [...prevState.list];</span><br><span class="line">    list.splice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123;list&#125;</span><br><span class="line">&#125;, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.list);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react将HTML字符串解析为HTML标签</title>
      <link href="/post/1decbe10.html"/>
      <url>/post/1decbe10.html</url>
      
        <content type="html"><![CDATA[<p>当后台返回的数据是字符串html的话，我们可以利用dangerouslySetInnerHTML属性来把字符串转换成html标签</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showhtml</span>(<span class="params">htmlString</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> html = &#123;<span class="attr">__html</span>:htmlString&#125;;</span><br><span class="line">    <span class="keyword">return</span>   <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">dangerouslySetInnerHTML</span>=<span class="string">&#123;html&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react中label标签的作用</title>
      <link href="/post/b1e1930a.html"/>
      <url>/post/b1e1930a.html</url>
      
        <content type="html"><![CDATA[<p>当我们点击输入内容触发input焦点的时候，就需要使用到label标签里的htmlFor属性来扩大点击的区域</p><p><img src="/post/b1e1930a/react_seventeen_one.png" alt></p><a id="more"></a><h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><p><img src="/post/b1e1930a/react_seventeen_two.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react子组件向父组件传值</title>
      <link href="/post/22835517.html"/>
      <url>/post/22835517.html</url>
      
        <content type="html"><![CDATA[<p>子组件向父组件传值，注意父组件传递函数的时候必须绑定this到当前父组件（handleEmail={this.handleEmail.bind(this)}），不然会报错</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***实现在输入框输入邮箱时，在div中即时显示输入内容***/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"test"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/子组件</span></span><br><span class="line"><span class="regexp">var Child = React.createClass(&#123;</span></span><br><span class="line"><span class="regexp">    render: function()&#123;</span></span><br><span class="line"><span class="regexp">        return (</span></span><br><span class="line"><span class="regexp">            &lt;div&gt;</span></span><br><span class="line"><span class="regexp">                邮箱：&lt;input onChange=&#123;this.props.handleEmail&#125;/</span>&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/父组件</span></span><br><span class="line"><span class="regexp">var Parent = React.createClass(&#123;</span></span><br><span class="line"><span class="regexp">    getInitialState: function()&#123;</span></span><br><span class="line"><span class="regexp">        return &#123;</span></span><br><span class="line"><span class="regexp">            email: ''</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    handleEmail: function(event)&#123;</span></span><br><span class="line"><span class="regexp">        this.setState(&#123;email: event.target.value&#125;);</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    render: function()&#123;</span></span><br><span class="line"><span class="regexp">        return (</span></span><br><span class="line"><span class="regexp">            &lt;div&gt;</span></span><br><span class="line"><span class="regexp">                &lt;div&gt;邮箱：&#123;this.state.email&#125;&lt;/</span>div&gt;</span><br><span class="line">                &lt;Child name=<span class="string">"email"</span> handleEmail=&#123;<span class="keyword">this</span>.handleEmail.bind(<span class="keyword">this</span>)&#125;/&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br><span class="line"><span class="regexp">React.render(</span></span><br><span class="line"><span class="regexp">  &lt;Parent /</span>&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'test'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react调试工具Reactdevelopertools</title>
      <link href="/post/c8b5cf9d.html"/>
      <url>/post/c8b5cf9d.html</url>
      
        <content type="html"><![CDATA[<p>1.首先具备翻墙条件</p><p>2.进入谷歌浏览器找到扩展程序</p><p>3.搜索react，第一个就是Reactdevelopertools</p><p>4.点击安装，完成</p><a id="more"></a><h3 id="使用如下："><a href="#使用如下：" class="headerlink" title="使用如下："></a>使用如下：</h3><p><img src="/post/c8b5cf9d/fifteen.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react中prop-types的使用</title>
      <link href="/post/94fda07a.html"/>
      <url>/post/94fda07a.html</url>
      
        <content type="html"><![CDATA[<p>什么是prop-types？prop代表父组件传递过来的值，types代表类型。简单来说就是用来校验父组件传递过来值的类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line">TodoItem.propTypes = &#123;</span><br><span class="line">    test: PropTypes.string.isRequired,   <span class="comment">//加上isRequired以后，即使父组件没传递值也会抛出警告</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line">TodoItem.propTypes = &#123;</span><br><span class="line">    test: PropTypes.arrayOf(PropTypes.string, PropTypes.number)   <span class="comment">//可以设置多个类型</span></span><br><span class="line">    test: PropTypes.oneOfType([PropTypes.string, PropTypes.number])   <span class="comment">//符合任意一个类型即可</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么如何解决父组件没传递值也会抛出的警告呢？可以使用react里的defaultProps来设置默认的props值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TodoItem.defaultProps = &#123;</span><br><span class="line">  test: <span class="string">'hello word'</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有想学习更多proptypes的同学请关注react文档<a href="https://reactjs.org/docs/typechecking-with-proptypes.html">https://reactjs.org/docs/typechecking-with-proptypes.html</a></p><p>大家学会了吗？</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react中虚拟DOM</title>
      <link href="/post/1bd06a42.html"/>
      <url>/post/1bd06a42.html</url>
      
        <content type="html"><![CDATA[<p>简单来说虚拟DOM就是一个js对象，相对于真实dom来做比较更节约性能，虚拟DOM执行过程如下</p><p><img src="/post/1bd06a42/react_thirteen.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react中ref的使用</title>
      <link href="/post/9d55fbbd.html"/>
      <url>/post/9d55fbbd.html</url>
      
        <content type="html"><![CDATA[<p>在react中获取真实dom的时候就需要用到ref属性，具体使用如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyComponent = React.createClass(&#123;</span><br><span class="line">  handleClick: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.input)</span><br><span class="line">  &#125;,</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input type=<span class="string">"text"</span> ref=&#123;(input) =&gt; &#123;<span class="keyword">this</span>.input = input&#125;&#125; /&gt;</span><br><span class="line">        &lt;input type=<span class="string">"button"</span> value=<span class="string">"Focus the text input"</span> onClick=&#123;<span class="keyword">this</span>.handleClick&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;MyComponent /</span>&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react中使用charles实现本地数据mock</title>
      <link href="/post/a56332ac.html"/>
      <url>/post/a56332ac.html</url>
      
        <content type="html"><![CDATA[<p>首先下载charles软件地址，更详细的使用方法都包含在操作文档里，包含汉化版补丁（下载后查看）</p><p>链接：<a href="https://pan.baidu.com/s/1Q5rMbcX0Wus7AwdGUWa-Wg">https://pan.baidu.com/s/1Q5rMbcX0Wus7AwdGUWa-Wg</a> </p><p>提取码：mkgt </p><a id="more"></a><h3 id="如何利用charles来mock呢？首先我们要新建一个json文件来写我们的json数据"><a href="#如何利用charles来mock呢？首先我们要新建一个json文件来写我们的json数据" class="headerlink" title="如何利用charles来mock呢？首先我们要新建一个json文件来写我们的json数据"></a>如何利用charles来mock呢？首先我们要新建一个json文件来写我们的json数据</h3><p>1.点击菜单栏中的工具</p><p>2.点击本地映射</p><p>3.勾选启用本地映射</p><p>4.点击添加</p><p>5.协议(http) =&gt; 主机(localhost) =&gt; 端口(当前本地端口号) =&gt; 路径(/api/lala) =&gt; 点击选择，选择自己创建的json文件 =&gt; 点击确定</p><p>6.ajax请求/api/lala接口，就可以返回数据了</p><p>大家学会了吗？</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react中使用immutable</title>
      <link href="/post/bc84495a.html"/>
      <url>/post/bc84495a.html</url>
      
        <content type="html"><![CDATA[<p>官方文档（<a href="https://immutable-js.github.io/immutable-js/docs/#/）">https://immutable-js.github.io/immutable-js/docs/#/）</a></p><p>有人说 Immutable 可以给 React 应用带来数十倍的提升，也有人说 Immutable 的引入是近期 JavaScript 中伟大的发明，因为同期 React 太火，它的光芒被掩盖了。这些至少说明 Immutable 是很有价值的，下面我们来一探究竟。</p><p>JavaScript 中的对象一般是可变的（Mutable），因为使用了引用赋值，新的对象简单的引用了原始对象，改变新的对象将影响到原始对象。如 foo={a: 1}; bar=foo; bar.a=2 你会发现此时 foo.a 也被改成了 2。虽然这样做可以节约内存，但当应用复杂后，这就造成了非常大的隐患，Mutable 带来的优点变得得不偿失。为了解决这个问题，一般的做法是使用 shallowCopy（浅拷贝）或 deepCopy（深拷贝）来避免被修改，但这样做造成了 CPU 和内存的浪费。</p><p>Immutable 可以很好地解决这些问题。</p><a id="more"></a><h3 id="什么是-IMMUTABLE-DATA"><a href="#什么是-IMMUTABLE-DATA" class="headerlink" title="什么是 IMMUTABLE DATA"></a>什么是 IMMUTABLE DATA</h3><p><font color="blue">Immutable Data 就是一旦创建，就不能再被更改的数据。对 Immutable 对象的任何修改或添加删除操作都会返回一个新的 Immutable 对象。</font>Immutable 实现的原理是 Persistent Data Structure（持久化数据结构），也就是使用旧数据创建新数据时，要保证旧数据同时可用且不变。同时为了避免 deepCopy 把所有节点都复制一遍带来的性能损耗，Immutable 使用了 Structural Sharing（结构共享），即如果对象树中一个节点发生变化，只修改这个节点和受它影响的父节点，其它节点则进行共享。</p><p>immutable提供了get和set方法</p><p><img src="/post/bc84495a/react_ten_one.png" alt><br><img src="/post/bc84495a/react_ten_two.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react组件性能优化PureComponent</title>
      <link href="/post/52660866.html"/>
      <url>/post/52660866.html</url>
      
        <content type="html"><![CDATA[<p>首先我们使用react组件会配合connect来连接store获取state，那么只要store中的state发生改变组件就会重新渲染，所以性能不高，一般我们可以使用shouldComponentUpdate()来判断，但react提供了PureComponent组件，当我们把Component替换成PureComponent的时候会自动帮我们优化组件避免不必要的渲染，<font color="blue">注意：前提是使用immutable来管理数据，不然会出现一些问题。</font></p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; PureComponent &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">PureComponent</span></span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span>(<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react中异步组件以及withRouter的使用</title>
      <link href="/post/ec468c1e.html"/>
      <url>/post/ec468c1e.html</url>
      
        <content type="html"><![CDATA[<p>什么是异步组件？简单来说就是异步加载一个组件，正常情况浏览器加载的是我们打包好的bundle.js文件，那么这个文件是集合了所有js是代码，然而我们首屏加载并不需要一次性加载所有的组件，这会造成性能的损耗，所以我们可以使用异步组件，<font color="blue">推荐使用（react-loadable）<a href="https://github.com/jamiebuilds/react-loadable">https://github.com/jamiebuilds/react-loadable</a></font>，那么使用react-loadable就会造成路由跳转的问题，所以我们需要使用withRouter来解决，<font color="blue">withRouter组件的功能是让当前组件有能力获取到所有的参数和内容</font></p><a id="more"></a><p><img src="/post/ec468c1e/react_eight.png" alt></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先要下载yarn add react-loadable</span></span><br><span class="line"><span class="comment">//loadable.js文件</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> Loadable <span class="keyword">from</span> <span class="string">'react-loadable'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LoadableComponent = Loadable(&#123;</span><br><span class="line">  loader: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./'</span>),  <span class="comment">//./需要异步的组件</span></span><br><span class="line">  loading()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>正在加载<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="comment">//可以加载一些好看的loading</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; <span class="xml"><span class="tag">&lt;<span class="name">LoadableComponent</span>/&gt;</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js文件</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; withRouter &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Detail</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.props.match.params.id);  <span class="comment">//这时候就可以获取到了，页面也不会报错了</span></span><br><span class="line">        <span class="keyword">return</span>(<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapState, mapDispatch)(withRouter(Detail));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//路由部分</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter, Route &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span>;</span><br><span class="line"><span class="keyword">import</span> Detail <span class="keyword">from</span> <span class="string">'./pages/detail/loadable.js'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">                &lt;BrowserRouter&gt;</span><br><span class="line">                    &lt;div&gt;</span><br><span class="line">                        &lt;Route path=<span class="string">'/detail/:id'</span> exact component=&#123;Detail&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">                    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>BrowserRouter&gt;</span><br><span class="line">            &lt;<span class="regexp">/Provider&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>create-react-app 构建的项目使用代理 proxy</title>
      <link href="/post/1c181ff4.html"/>
      <url>/post/1c181ff4.html</url>
      
        <content type="html"><![CDATA[<p>1.首先进入项目运行 npm run eject 展开详细代码（只可以使用一次，展开后不可恢复）</p><p>2.create-react-app 的版本在低于 2.0 的时候可以在 package.json 增加 proxy 配置， 配置成如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"proxy"</span>:&#123;</span><br><span class="line">    <span class="string">"/api/**"</span>:&#123;</span><br><span class="line">        <span class="string">"target"</span>:<span class="string">"https://easy-mock.com/mock/5c0f31837214cf627b8d43f0/"</span>,   <span class="comment">//需要代理的地址</span></span><br><span class="line">    　　 <span class="string">"changeOrigin"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>3.create-react-app 的版本高于 2.0 版本的时候在 package.json 只能配置 string 类型， 配置成如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"proxy"</span>: <span class="string">"https://easy-mock.com/mock/5c0f31837214cf627b8d43f0/"</span>,</span><br></pre></td></tr></table></figure><p>4.更好的配置，建立 src/setupProxy.js 文件，npm 安装 install http-proxy-middleware , 配置成如下：(可配置多个代理)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> proxy = <span class="built_in">require</span>(<span class="string">"http-proxy-middleware"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line">    app.use(</span><br><span class="line">        proxy(<span class="string">"/base/"</span>, &#123;</span><br><span class="line">            target: <span class="string">"http://45.32.15.21:8090/"</span>,</span><br><span class="line">            changeOrigin: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">    );</span><br><span class="line">    app.use(</span><br><span class="line">        proxy(<span class="string">"/api/"</span>, &#123;</span><br><span class="line">            target: <span class="string">"https://easy-mock.com/mock/5c0f31837214cf627b8d43f0/"</span>,</span><br><span class="line">            changeOrigin: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react中使用antd按需加载（第一部）</title>
      <link href="/post/e1aaa582.html"/>
      <url>/post/e1aaa582.html</url>
      
        <content type="html"><![CDATA[<p>什么是react按需加载？简单来说就是当我们引用antd的时候需要引入全局css样式，这会对性能造成一定的影响，那么使用按需加载以后就不需要引入css全局样式了，直接引入功能模块即可，既然需要设置按需加载就要对webpack文件进行修改，需要我们执行npm run eject命令来展开项目的隐藏文件，如果只是简单的修改，我们可以使用react-app-rewired定义全局变量，react-app-rewired的作用就是在不eject的情况下,覆盖create-react-app的配置。具体如下：</p><h3 id="使用-react-app-rewired-对-create-react-app-的默认配置进行自定义"><a href="#使用-react-app-rewired-对-create-react-app-的默认配置进行自定义" class="headerlink" title="使用 react-app-rewired 对 create-react-app 的默认配置进行自定义"></a>使用 react-app-rewired 对 create-react-app 的默认配置进行自定义</h3><p>1.yarn add react-app-rewired –dev</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* package.json */</span></span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">-   <span class="string">"start"</span>: <span class="string">"react-scripts start"</span>,</span><br><span class="line">+   <span class="string">"start"</span>: <span class="string">"react-app-rewired start"</span>,</span><br><span class="line">-   <span class="string">"build"</span>: <span class="string">"react-scripts build"</span>,</span><br><span class="line">+   <span class="string">"build"</span>: <span class="string">"react-app-rewired build"</span>,</span><br><span class="line">-   <span class="string">"test"</span>: <span class="string">"react-scripts test --env=jsdom"</span>,</span><br><span class="line">+   <span class="string">"test"</span>: <span class="string">"react-app-rewired test --env=jsdom"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>2.然后在项目根目录创建一个config-overrides.js用于修改默认配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">override</span>(<span class="params">config, env</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do stuff with the webpack config...</span></span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="使用babel-plugin-import"><a href="#使用babel-plugin-import" class="headerlink" title="使用babel-plugin-import"></a>使用babel-plugin-import</h3><p>babel-plugin-import 是一个用于按需加载组件代码和样式babel 插件（原理），现在我们尝试安装它并修改config-overrides.js 文件</p><p>1.yarn add babel-plugin-import –dev</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+ <span class="keyword">const</span> &#123; injectBabelPlugin &#125; = <span class="built_in">require</span>(<span class="string">'react-app-rewired'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">override</span>(<span class="params">config, env</span>) </span>&#123;</span><br><span class="line">+   config = injectBabelPlugin([<span class="string">'import'</span>, &#123; <span class="attr">libraryName</span>: <span class="string">'antd'</span>, <span class="attr">libraryDirectory</span>: <span class="string">'es'</span>, <span class="attr">style</span>: <span class="string">'css'</span> &#125;], config);</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>或者也可以修改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">            test: <span class="regexp">/\.(js|jsx|mjs)$/</span>,</span><br><span class="line">            include: paths.appSrc,</span><br><span class="line">            loader: <span class="built_in">require</span>.resolve(<span class="string">'babel-loader'</span>),</span><br><span class="line">            options: &#123;</span><br><span class="line">              plugins: [</span><br><span class="line">                <span class="comment">// 引入样式为 'css'</span></span><br><span class="line">                <span class="comment">// style为true 则默认引入less</span></span><br><span class="line">                [<span class="string">'import'</span>, &#123; <span class="attr">libraryName</span>: <span class="string">'antd'</span>, <span class="attr">style</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">              ],</span><br><span class="line">              <span class="comment">// This is a feature of `babel-loader` for webpack (not Babel itself).</span></span><br><span class="line">              <span class="comment">// It enables caching results in ./node_modules/.cache/babel-loader/</span></span><br><span class="line">              <span class="comment">// directory for faster rebuilds.</span></span><br><span class="line">              cacheDirectory: <span class="literal">true</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://ant.design/docs/react/use-with-create-react-app-cn">https://ant.design/docs/react/use-with-create-react-app-cn</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react中自定义antd主题与支持less（第二部）</title>
      <link href="/post/15c9b8d0.html"/>
      <url>/post/15c9b8d0.html</url>
      
        <content type="html"><![CDATA[<h3 id="自定义主题"><a href="#自定义主题" class="headerlink" title="自定义主题"></a>自定义主题</h3><p>首先自定义主题需要修改antd，antd本身也是less写的之后编译成css的，所以当我们需要使用less。</p><p>1.yarn add react-app-rewire-less –dev</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; injectBabelPlugin &#125; = <span class="built_in">require</span>(<span class="string">'react-app-rewired'</span>);</span><br><span class="line">+ <span class="keyword">const</span> rewireLess = <span class="built_in">require</span>(<span class="string">'react-app-rewire-less'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">override</span>(<span class="params">config, env</span>) </span>&#123;</span><br><span class="line">-   config = injectBabelPlugin([<span class="string">'import'</span>, &#123; <span class="attr">libraryName</span>: <span class="string">'antd'</span>, <span class="attr">style</span>: <span class="string">'css'</span> &#125;], config);</span><br><span class="line">+   config = injectBabelPlugin([<span class="string">'import'</span>, &#123; <span class="attr">libraryName</span>: <span class="string">'antd'</span>, <span class="attr">style</span>: <span class="literal">true</span> &#125;], config);</span><br><span class="line">+   config = rewireLess.withLoaderOptions(&#123;</span><br><span class="line">+     modifyVars: &#123; <span class="string">"@primary-color"</span>: <span class="string">"#1DA57A"</span> &#125;,</span><br><span class="line">+   &#125;)(config, env);</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><a id="more"></a><p>参考链接：<a href="https://ant.design/docs/react/use-with-create-react-app-cn">https://ant.design/docs/react/use-with-create-react-app-cn</a></p><h3 id="使用less"><a href="#使用less" class="headerlink" title="使用less"></a>使用less</h3><p><font color="blue">如果已经配置react-app-rewire-less，则无需再进行此操作</font></p><p>1.npm install less-loader less –save-dev</p><p>2.修改node_modules/react_script/config下的webpack.config.dev.js 和 webpack.config-prod.js 配置文件</p><ul><li>test: /.css$/ 改为 /.(css|less)$/</li><li>test: /.css$/ 的 use 数组配置增加 less-loader</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.(css|less)$/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    <span class="built_in">require</span>.resolve(<span class="string">'style-loader'</span>),</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="built_in">require</span>.resolve(<span class="string">'css-loader'</span>),</span><br><span class="line">      options: &#123;</span><br><span class="line">        importLoaders: <span class="number">1</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="built_in">require</span>.resolve(<span class="string">'postcss-loader'</span>),</span><br><span class="line">      options: &#123;</span><br><span class="line">        <span class="comment">// Necessary for external CSS imports to work</span></span><br><span class="line">        <span class="comment">// https://github.com/facebookincubator/create-react-app/issues/2677</span></span><br><span class="line">        ident: <span class="string">'postcss'</span>,</span><br><span class="line">        plugins: <span class="function"><span class="params">()</span> =&gt;</span> [</span><br><span class="line">          <span class="built_in">require</span>(<span class="string">'postcss-flexbugs-fixes'</span>),</span><br><span class="line">          autoprefixer(&#123;</span><br><span class="line">            browsers: [</span><br><span class="line">              <span class="string">'&gt;1%'</span>,</span><br><span class="line">              <span class="string">'last 4 versions'</span>,</span><br><span class="line">              <span class="string">'Firefox ESR'</span>,</span><br><span class="line">              <span class="string">'not ie &lt; 9'</span>, <span class="comment">// React doesn't support IE8 anyway</span></span><br><span class="line">            ],</span><br><span class="line">            flexbox: <span class="string">'no-2009'</span>,</span><br><span class="line">          &#125;),</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="built_in">require</span>.resolve(<span class="string">'less-loader'</span>) <span class="comment">// compiles Less to CSS</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react中antd+css Module一起使用</title>
      <link href="/post/b9ba1266.html"/>
      <url>/post/b9ba1266.html</url>
      
        <content type="html"><![CDATA[<h3 id="antd-和-css-modules-不能混用-针对antd的css-单独写一条loader的规则-不开启-css-modules。"><a href="#antd-和-css-modules-不能混用-针对antd的css-单独写一条loader的规则-不开启-css-modules。" class="headerlink" title="antd 和 css modules 不能混用,针对antd的css 单独写一条loader的规则,不开启 css modules。"></a>antd 和 css modules 不能混用,针对antd的css 单独写一条loader的规则,不开启 css modules。</h3><p>使用 exclude 和 include 配置参考<a href="https://segmentfault.com/q/1010000011223900">https://segmentfault.com/q/1010000011223900</a>,修改webpack.config.dev.js 和 webpack.config-prod.js 配置文件 (尽量不要使用less-loader 来处理css文件，在与antd一起使用时可能出现错误，单独写一条规则)，所以我们只能两个来处理css的loader。</p><a id="more"></a><p>在react中使用antd+less+css modules参考<a href="https://www.jianshu.com/p/51ff1c8be301">https://www.jianshu.com/p/51ff1c8be301</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ant的按需加载</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                        include: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                        use: [</span><br><span class="line">                            <span class="built_in">require</span>.resolve(<span class="string">'style-loader'</span>),</span><br><span class="line">                            &#123;</span><br><span class="line">                                loader: <span class="built_in">require</span>.resolve(<span class="string">'css-loader'</span>),</span><br><span class="line">                                options: &#123;</span><br><span class="line">                                    importLoaders: <span class="number">1</span>,</span><br><span class="line">                                &#125;,</span><br><span class="line">                            &#125;,</span><br><span class="line">                            &#123;</span><br><span class="line">                                loader: <span class="built_in">require</span>.resolve(<span class="string">'postcss-loader'</span>),</span><br><span class="line">                                options: &#123;</span><br><span class="line">                                    <span class="comment">// Necessary for external CSS imports to work</span></span><br><span class="line">                                    <span class="comment">// https://github.com/facebookincubator/create-react-app/issues/2677</span></span><br><span class="line">                                    ident: <span class="string">'postcss'</span>,</span><br><span class="line">                                    plugins: <span class="function"><span class="params">()</span> =&gt;</span> [</span><br><span class="line">                                        <span class="built_in">require</span>(<span class="string">'postcss-flexbugs-fixes'</span>),</span><br><span class="line">                                        autoprefixer(&#123;</span><br><span class="line">                                            browsers: [</span><br><span class="line">                                                <span class="string">'&gt;1%'</span>,</span><br><span class="line">                                                <span class="string">'last 4 versions'</span>,</span><br><span class="line">                                                <span class="string">'Firefox ESR'</span>,</span><br><span class="line">                                                <span class="string">'not ie &lt; 9'</span>, <span class="comment">// React doesn't support IE8 anyway</span></span><br><span class="line">                                            ],</span><br><span class="line">                                            flexbox: <span class="string">'no-2009'</span>,</span><br><span class="line">                                        &#125;),</span><br><span class="line">                                    ],</span><br><span class="line">                                &#125;,</span><br><span class="line">                            &#125;,</span><br><span class="line">                        ],</span><br><span class="line">                    &#125;,</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正常的网页中的css</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                        use: [</span><br><span class="line">                            <span class="built_in">require</span>.resolve(<span class="string">'style-loader'</span>),</span><br><span class="line">                            &#123;</span><br><span class="line">                                loader: <span class="built_in">require</span>.resolve(<span class="string">'css-loader'</span>),</span><br><span class="line">                                options: &#123;</span><br><span class="line">                                    importLoaders: <span class="number">1</span>,</span><br><span class="line">                                    modules: <span class="literal">true</span>,</span><br><span class="line">                                    localIdentName: <span class="string">"[name]__[local]___[hash:base64:5]"</span>,</span><br><span class="line"></span><br><span class="line">                                &#125;,</span><br><span class="line">                            &#125;,</span><br><span class="line">                            &#123;</span><br><span class="line">                                loader: <span class="built_in">require</span>.resolve(<span class="string">'postcss-loader'</span>),</span><br><span class="line">                                options: &#123;</span><br><span class="line">                                    <span class="comment">// Necessary for external CSS imports to work</span></span><br><span class="line">                                    <span class="comment">// https://github.com/facebookincubator/create-react-app/issues/2677</span></span><br><span class="line">                                    ident: <span class="string">'postcss'</span>,</span><br><span class="line">                                    plugins: <span class="function"><span class="params">()</span> =&gt;</span> [</span><br><span class="line">                                        <span class="built_in">require</span>(<span class="string">'postcss-flexbugs-fixes'</span>),</span><br><span class="line">                                        autoprefixer(&#123;</span><br><span class="line">                                            browsers: [</span><br><span class="line">                                                <span class="string">'&gt;1%'</span>,</span><br><span class="line">                                                <span class="string">'last 4 versions'</span>,</span><br><span class="line">                                                <span class="string">'Firefox ESR'</span>,</span><br><span class="line">                                                <span class="string">'not ie &lt; 9'</span>, <span class="comment">// React doesn't support IE8 anyway</span></span><br><span class="line">                                            ],</span><br><span class="line">                                            flexbox: <span class="string">'no-2009'</span>,</span><br><span class="line">                                        &#125;),</span><br><span class="line">                                    ],</span><br><span class="line">                                &#125;,</span><br><span class="line">                            &#125;,</span><br><span class="line">                        ],</span><br><span class="line">                    &#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react中create-react-app配置antd按需加载（方法二）</title>
      <link href="/post/cc896a6d.html"/>
      <url>/post/cc896a6d.html</url>
      
        <content type="html"><![CDATA[<p>1.yarn add babel-plugin-import</p><p>2.在根目录下的package.json下的bable中添加相应代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"babel"</span>: &#123;</span><br><span class="line">    <span class="string">"presets"</span>: [</span><br><span class="line">      <span class="string">"react-app"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"plugins"</span>: [</span><br><span class="line">      [</span><br><span class="line">        <span class="string">"import"</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"libraryName"</span>: <span class="string">"antd"</span>,</span><br><span class="line">          <span class="string">"style"</span>: <span class="string">"css"</span></span><br><span class="line">           <span class="comment">// 引入样式为 css</span></span><br><span class="line">           <span class="comment">// style为true 则默认引入less</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>3.重启项目yarn run start</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript中new url()属性，轻松解析url地址</title>
      <link href="/post/6519afef.html"/>
      <url>/post/6519afef.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-首先写一个假的地址（q-URLUtils-searchParams-amp-topic-api）相当于当前的window-location-href"><a href="#1-首先写一个假的地址（q-URLUtils-searchParams-amp-topic-api）相当于当前的window-location-href" class="headerlink" title="1.首先写一个假的地址（q=URLUtils.searchParams&amp;topic=api）相当于当前的window.location.href"></a>1.首先写一个假的地址（q=URLUtils.searchParams&amp;topic=api）相当于当前的window.location.href</h3><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> urlParams = <span class="keyword">new</span> URL(<span class="built_in">window</span>.location.href);</span><br><span class="line">urlParams.searchParams.has(<span class="string">"topic"</span>) === <span class="literal">true</span>; <span class="comment">// true</span></span><br><span class="line">urlParams.searchParams.get(<span class="string">"topic"</span>) === <span class="string">"api"</span>; <span class="comment">// true</span></span><br><span class="line">urlParams.searchParams.getAll(<span class="string">"topic"</span>); <span class="comment">// ["api"]</span></span><br><span class="line">urlParams.searchParams.get(<span class="string">"foo"</span>) === <span class="string">""</span>; <span class="comment">// true</span></span><br><span class="line">urlParams.searchParams.append(<span class="string">"topic"</span>, <span class="string">"webdev"</span>);</span><br><span class="line">urlParams.searchParams.toString(); <span class="comment">// "q=URLUtils.searchParams&amp;topic=api&amp;topic=webdev"</span></span><br><span class="line">urlParams.searchParams.set(<span class="string">"topic"</span>, <span class="string">"More webdev"</span>);</span><br><span class="line">urlParams.searchParams.toString(); <span class="comment">// "q=URLUtils.searchParams&amp;topic=More+webdev"</span></span><br><span class="line">urlParams.searchParams.delete(<span class="string">"topic"</span>);</span><br><span class="line">urlParams.searchParams.toString(); <span class="comment">// "q=URLUtils.searchParams"</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react中关于create-react-app2里css相关配置</title>
      <link href="/post/b377091f.html"/>
      <url>/post/b377091f.html</url>
      
        <content type="html"><![CDATA[<h3 id="先看-webpack-config-dev-js-里的相关代码："><a href="#先看-webpack-config-dev-js-里的相关代码：" class="headerlink" title="先看 webpack.config.dev.js 里的相关代码："></a>先看 webpack.config.dev.js 里的相关代码：</h3><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// style files regexes</span></span><br><span class="line"><span class="keyword">const</span> cssRegex = <span class="regexp">/\.css$/</span>;</span><br><span class="line"><span class="keyword">const</span> cssModuleRegex = <span class="regexp">/\.module\.css$/</span>;</span><br><span class="line"><span class="keyword">const</span> sassRegex = <span class="regexp">/\.(scss|sass)$/</span>;</span><br><span class="line"><span class="keyword">const</span> sassModuleRegex = <span class="regexp">/\.module\.(scss|sass)$/</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// common function to get style loaders</span></span><br><span class="line"><span class="keyword">const</span> getStyleLoaders = <span class="function">(<span class="params">cssOptions, preProcessor</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> loaders = [</span><br><span class="line">    <span class="built_in">require</span>.resolve(<span class="string">'style-loader'</span>),</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="built_in">require</span>.resolve(<span class="string">'css-loader'</span>),</span><br><span class="line">      options: cssOptions,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// Options for PostCSS as we reference these options twice</span></span><br><span class="line">      <span class="comment">// Adds vendor prefixing based on your specified browser support in</span></span><br><span class="line">      <span class="comment">// package.json</span></span><br><span class="line">      loader: <span class="built_in">require</span>.resolve(<span class="string">'postcss-loader'</span>),</span><br><span class="line">      options: &#123;</span><br><span class="line">        <span class="comment">// Necessary for external CSS imports to work</span></span><br><span class="line">        <span class="comment">// https://github.com/facebook/create-react-app/issues/2677</span></span><br><span class="line">        ident: <span class="string">'postcss'</span>,</span><br><span class="line">        plugins: <span class="function"><span class="params">()</span> =&gt;</span> [</span><br><span class="line">          <span class="built_in">require</span>(<span class="string">'postcss-flexbugs-fixes'</span>),</span><br><span class="line">          <span class="built_in">require</span>(<span class="string">'postcss-preset-env'</span>)(&#123;</span><br><span class="line">            autoprefixer: &#123;</span><br><span class="line">              flexbox: <span class="string">'no-2009'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            stage: <span class="number">3</span>,</span><br><span class="line">          &#125;),</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">if</span> (preProcessor) &#123;</span><br><span class="line">    loaders.push(<span class="built_in">require</span>.resolve(preProcessor));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> loaders;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">'development'</span>,</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">     &#123;</span><br><span class="line">       oneOf: [</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">        &#123;</span><br><span class="line">            test: cssRegex,</span><br><span class="line">            exclude: cssModuleRegex,</span><br><span class="line">            use: getStyleLoaders(&#123;</span><br><span class="line">              importLoaders: <span class="number">1</span>,</span><br><span class="line">            &#125;),</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">// Adds support for CSS Modules (https://github.com/css-modules/css-modules)</span></span><br><span class="line">          <span class="comment">// using the extension .module.css</span></span><br><span class="line">          &#123;</span><br><span class="line">            test: cssModuleRegex,</span><br><span class="line">            use: getStyleLoaders(&#123;</span><br><span class="line">              importLoaders: <span class="number">1</span>,</span><br><span class="line">              modules: <span class="literal">true</span>,</span><br><span class="line">              getLocalIdent: getCSSModuleLocalIdent,</span><br><span class="line">            &#125;),</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">// Opt-in support for SASS (using .scss or .sass extensions).</span></span><br><span class="line">          <span class="comment">// Chains the sass-loader with the css-loader and the style-loader</span></span><br><span class="line">          <span class="comment">// to immediately apply all styles to the DOM.</span></span><br><span class="line">          <span class="comment">// By default we support SASS Modules with the</span></span><br><span class="line">          <span class="comment">// extensions .module.scss or .module.sass</span></span><br><span class="line">          &#123;</span><br><span class="line">            test: sassRegex,</span><br><span class="line">            exclude: sassModuleRegex,</span><br><span class="line">            use: getStyleLoaders(&#123; <span class="attr">importLoaders</span>: <span class="number">2</span> &#125;, <span class="string">'sass-loader'</span>),</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">// Adds support for CSS Modules, but using SASS</span></span><br><span class="line">          <span class="comment">// using the extension .module.scss or .module.sass</span></span><br><span class="line">          &#123;</span><br><span class="line">            test: sassModuleRegex,</span><br><span class="line">            use: getStyleLoaders(</span><br><span class="line">              &#123;</span><br><span class="line">                importLoaders: <span class="number">2</span>,</span><br><span class="line">                modules: <span class="literal">true</span>,</span><br><span class="line">                getLocalIdent: getCSSModuleLocalIdent,</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="string">'sass-loader'</span></span><br><span class="line">            ),</span><br><span class="line">          &#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><p>4 个 样式文件后缀的正则表示，<font color="blue">这份配置里是将普通 (s)css 文件和 (s)css module 文件是按文件名后缀不同而区分对待的，前者视为普通 css 文件，而处理后者时开启 css-loader 的 module 模式。这样做的一个好处是区分明确，全局的 class 样式加写到 .(s)css 文件里，需要加 hash 的局部样式就写到 .module.(s)css 文件里，这样也可以不用在想要写一个全局样式时把 class 包到 :global() 里了。</font></p><p>getStyleLoaders 是一个返回 loader 配置的函数，内部默认有 [‘style-loader’, ‘css-loader’, ‘postcss-loader’] 三个 loader。函数接受两个参数，其中第一个是 css-loader 的 option 配置。第二个是视需要添加 sass-loader 或者 less-loader。需要添加 postcss 插件，可以在 getStyleLoaders 里对应的 plugin 配置里加。以上就是 development 下关于样式的配置，下面看看 production 里不一样的地方：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// style-loader 换成了下面的内容</span></span><br><span class="line">    &#123;</span><br><span class="line">      loader: MiniCssExtractPlugin.loader,</span><br><span class="line">      options: <span class="built_in">Object</span>.assign(</span><br><span class="line">        &#123;&#125;,</span><br><span class="line">        shouldUseRelativeAssetPaths ? &#123; <span class="attr">publicPath</span>: <span class="string">'../../'</span> &#125; : <span class="literal">undefined</span></span><br><span class="line">      ),</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>此外配置里还多了 mini-css-extract-plugin、optimize-css-assets-webpack-plugin、postcss-safe-parser 这三个东西，第一个的作用是将构建后的 css 样式，生成 .css 文件，然后以 link 标签的形式插入到模板 html 中；第二个和第三个的作用是压缩 css 文件。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>antd递归渲染左侧菜单</title>
      <link href="/post/d8d10588.html"/>
      <url>/post/d8d10588.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">renderMenu = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> data.map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(item.children)&#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                &lt;SubMenu title=&#123;item.title&#125; key=&#123;item.key&#125;&gt;</span><br><span class="line">                    &#123; <span class="keyword">this</span>.renderMenu(item.children) &#125;</span><br><span class="line">                &lt;<span class="regexp">/SubMenu&gt;</span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        return &lt;Menu.Item title=&#123;item.title&#125; key=&#123;item.key&#125;&gt;&#123;item.title&#125;&lt;Menu.Item&gt;</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>检测类型</title>
      <link href="/post/3a82717f.html"/>
      <url>/post/3a82717f.html</url>
      
        <content type="html"><![CDATA[<p>JavaScript 是弱类型语言，对类型没有严格限制，但是在程序中经常需要对类型进行检测和转换，下面结合示例介绍类型检测和转换的技巧。</p><h3 id="使用-typeof-检测类型"><a href="#使用-typeof-检测类型" class="headerlink" title="使用 typeof 检测类型"></a>使用 typeof 检测类型</h3><p>typeof 运算符专门用来测试值的类型，特别对于原始值有效，而对于对象类型的数据，如数组、对象等，返回的值都是字符串”object”。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">alert( <span class="keyword">typeof</span> <span class="number">1</span>);           <span class="comment">//返回字符串"number" </span></span><br><span class="line">alert( <span class="keyword">typeof</span> <span class="string">"a"</span>);         <span class="comment">//返回字符串"string"</span></span><br><span class="line">alert( <span class="keyword">typeof</span> <span class="literal">true</span>);        <span class="comment">//返回字符串"boolean" </span></span><br><span class="line">alert( <span class="keyword">typeof</span> &#123;&#125;);          <span class="comment">//返回字符串"object" </span></span><br><span class="line">alert( <span class="keyword">typeof</span> [] );         <span class="comment">//返回字符串"object"</span></span><br><span class="line">alert( <span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);<span class="comment">//返回字符串"function" </span></span><br><span class="line">alert( <span class="keyword">typeof</span> <span class="literal">undefined</span>);   <span class="comment">//返回字符串"undefined" </span></span><br><span class="line">alert( <span class="keyword">typeof</span> <span class="literal">null</span>);        <span class="comment">//返回字符串"object" </span></span><br><span class="line">alert( <span class="keyword">typeof</span> <span class="literal">NaN</span>);         <span class="comment">//返回字符串"number"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//由于 null 值返回类型为 object，用户可以定义一个检测简单数据类型的一般方法。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">type</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (o === <span class="literal">null</span> ) ? <span class="string">"null"</span> : (<span class="keyword">typeof</span> o);</span><br><span class="line">    <span class="comment">//如果是 null 值，则返回字符串"null"，否则返回(typeof o)表达式的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="使用-constructor-检测类型"><a href="#使用-constructor-检测类型" class="headerlink" title="使用 constructor 检测类型"></a>使用 constructor 检测类型</h3><p>对于对象、数组等复杂数据，可以使用 Object 对象的 constructor 属性进行检测。 constructor 表示构造器，该属性值引用的是构造当前对象的函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;&#125;; </span><br><span class="line"><span class="keyword">var</span> a = []; </span><br><span class="line">alert( o.constructor == <span class="built_in">Object</span>); <span class="comment">//返回 true </span></span><br><span class="line">alert( a.constructor == <span class="built_in">Array</span>);  <span class="comment">//返回 true</span></span><br></pre></td></tr></table></figure><p>使用 constructor 属性可以检测绝大部分数据的类型，但对于 undefined 和 null 特殊值， 就不能够使用 constructor 属性，否则会抛出异常。这时可以先把值转换为布尔值，如果为 true，则说明是存在值的， 然后再调用 constructor 属性。</p><h3 id="封装类型检测方法：-toString"><a href="#封装类型检测方法：-toString" class="headerlink" title="封装类型检测方法： toString()"></a>封装类型检测方法： toString()</h3><p>使用 toString() 方法可以设计一种更安全的检测 JavaScript 数据类型的方法，用户还可以根据开发需 要进一步补充检测类型的范围。 由 Object 对象定义的 toString() 方法返回的字符串形式是[object class]，其中object是大类表示对象的通用类型，class是小类表示对象的内部类型（Array,Function,Date,Math,Error……），用户自定义对象为object，class 值提供的信息与对象的 constructor 属性值相似，但是 class 值是以字符串的形式提供这些信息的，这在特定的环境中是非常有用的。如果使用 typeof运算符来检测，则所有对象的 class 值都为“Object” 或“Function”。所以不能够提供有效信息。 但是，要获取对象的 class 值的唯一方法是必须调用 Object 的原型方法 toString()，因为很多类型对象都会重置 Object 的 toString() 方法，所以不能直接调用对象的 toString() 方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>(); </span><br><span class="line">alert(d.toString());   <span class="comment">//返回当前 UTC 时间字符串 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m = <span class="built_in">Object</span>.prototype.toString; </span><br><span class="line">alert(m.apply(d));     <span class="comment">//返回字符串"[object Date]"</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安全检测 JavaScript 基本数据类型和内置对象 </span></span><br><span class="line"><span class="comment">//参数： o表示检测的值 </span></span><br><span class="line"><span class="comment">//返回值：返回字符串"undefined"、 "number"、"boolean"、"string"、 "function"、 "regexp"、"array"、"date"、"error"、"object"或"null"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">typeOf</span> (<span class="params">o</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">var</span> _toString = <span class="built_in">Object</span>.prototype.toString; </span><br><span class="line">    <span class="comment">//获取对象的 toString （）方法引用 </span></span><br><span class="line">    <span class="comment">//列举基本数据类型和内置对象类型，你还可以进一步补充该数组的检测数据类型范围 </span></span><br><span class="line">    <span class="keyword">var</span> _type = &#123; </span><br><span class="line">        <span class="string">"undefined"</span>:<span class="string">"undefined"</span>, </span><br><span class="line">        <span class="string">"number"</span>:<span class="string">"number"</span>, </span><br><span class="line">        <span class="string">"boolean"</span>:<span class="string">"boolean"</span>,</span><br><span class="line">        <span class="string">"string"</span>:<span class="string">"string"</span>,</span><br><span class="line">        <span class="string">"[object Function]"</span>:<span class="string">"function"</span>,</span><br><span class="line">        <span class="string">"[object RegExp]"</span>:<span class="string">"regexp"</span>, </span><br><span class="line">        <span class="string">"[object Array]"</span>:<span class="string">"array"</span>,</span><br><span class="line">        <span class="string">"[object Date]"</span>:<span class="string">"date"</span>,</span><br><span class="line">        <span class="string">"[object Error)"</span>:<span class="string">"error"</span> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _type[<span class="keyword">typeof</span> o] || _type[_toString.call(o)) || (o ? <span class="string">"object"</span> : <span class="string">"null"</span>);   <span class="comment">//通过把值转换为字符串，然后匹配返回字符串中是否包含特定字符进行检测</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>while/do while</title>
      <link href="/post/19e4da19.html"/>
      <url>/post/19e4da19.html</url>
      
        <content type="html"><![CDATA[<p><img src="/post/19e4da19/javascript_while_img.png" alt></p><h3 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h3><p>while 语句是基本的重复操作语句。 在while语句中会先计算循环条件，如果循环条件返回值为 false，则会跳出循环结构，如果循环条件返回值为 true，则执行循环体内的语句，如果一直为true则导致死循环。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">0</span>;            <span class="comment">//声明并初始化循环变量 </span></span><br><span class="line"><span class="keyword">while</span> (n &lt; <span class="number">10</span>) &#123;      <span class="comment">//循环条件 </span></span><br><span class="line">    n ++;             <span class="comment">//递增循环变量</span></span><br><span class="line">    alert (n);        <span class="comment">//执行循环操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="do-while-语句"><a href="#do-while-语句" class="headerlink" title="do/while 语句"></a>do/while 语句</h3><p>do/while 语句是 while 循环结构的特殊形式，只不过它把循环条件放在结构的底部，而不是 while 语句顶部。其语法格式如下： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">0</span>;    <span class="comment">//声明并初始化循环变量</span></span><br><span class="line"><span class="keyword">do</span> &#123;          <span class="comment">//执行循环体命令</span></span><br><span class="line">    n++;</span><br><span class="line">    alert(n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(n &lt; <span class="number">10</span>);<span class="comment">//循环条件</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组迭代</title>
      <link href="/post/2cb76261.html"/>
      <url>/post/2cb76261.html</url>
      
        <content type="html"><![CDATA[<p>数组法代是一件很重要的操作，在 ECMAScript 5 之前主要使用 for 语句实现，这种方式不是很方便， 为此 ECMAScript 5 新增了 5 个与迭代相关的方法。</p><pre><code>1.forEach：为数组中的每个元素调用定义的回调函数。2.every：检查定义的回调函数如果每一项都返回true，则返回 true。3.some：检查定义的回调函数如果任意一项返回true。返回 true。4.map：对数组的每个元素调用定义的回调函数，并返回包含结果的数组。5.filter：对数组的每个元素调用定义的回调函数，并返回回调函数为其返回 true 的值的数组。 具体说明如下。</code></pre><a id="more"></a><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//forEach中可选参数thisArg可以为函数指定this指向，忽略则指向window。（箭头函数无效，仅普通函数）</span></span><br><span class="line"><span class="keyword">let</span> thisArg = &#123;</span><br><span class="line">    name: <span class="string">'熊猫'</span>,</span><br><span class="line">    age: <span class="number">21</span>,</span><br><span class="line">    sex: <span class="string">'女'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, array</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)   <span class="comment">//&#123;name: '熊猫', age: 21, sex: '女'&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(value)  <span class="comment">//123</span></span><br><span class="line">    <span class="built_in">console</span>.log(index)  <span class="comment">//012</span></span><br><span class="line">    <span class="built_in">console</span>.log(array)  <span class="comment">//1,2,3</span></span><br><span class="line">&#125;,thisArg);</span><br></pre></td></tr></table></figure><h3 id="every"><a href="#every" class="headerlink" title="every"></a>every</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125;))  <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h3 id="some"><a href="#some" class="headerlink" title="some"></a>some</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">2</span>;</span><br><span class="line">&#125;))  <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value + <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr);  <span class="comment">//2,3,4</span></span><br></pre></td></tr></table></figure><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>, <span class="string">"element"</span>, <span class="number">10</span>, <span class="string">"the"</span>, <span class="literal">true</span>];</span><br><span class="line"><span class="keyword">var</span> result = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">typeof</span> value === <span class="string">'string'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">document</span>.write(result);   <span class="comment">//返回值：["element", "the"]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reduce/reduceRight</title>
      <link href="/post/dce9f18b.html"/>
      <url>/post/dce9f18b.html</url>
      
        <content type="html"><![CDATA[<p>使用 reduce 和 reduceRight 方法可以汇总数组元素的值，具体用法如下：</p><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">appendCurrent</span> (<span class="params">previousValue, currentValue</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> previousValue + <span class="string">"::"</span> + currentValue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> elements = [<span class="string">"abc"</span>, <span class="string">"def"</span>, <span class="number">123</span>, <span class="number">456</span>];</span><br><span class="line"><span class="keyword">var</span> result = elements.reduce(appendCurrent);</span><br><span class="line"><span class="built_in">document</span>.write(result); <span class="comment">//abc::def::123::456</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="reduceRight"><a href="#reduceRight" class="headerlink" title="reduceRight"></a>reduceRight</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">appendCurrent</span> (<span class="params">previousValue, currentValue</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> previousValue + <span class="string">"::"</span> + currentValue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> elements = [<span class="string">"abc"</span>, <span class="string">"def"</span>, <span class="number">123</span>, <span class="number">456</span>];</span><br><span class="line"><span class="keyword">var</span> result = elements.reduceRight(appendCurrent);</span><br><span class="line"><span class="built_in">document</span>.write(result); <span class="comment">//456::123::def::abc</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拓展 Array 方法</title>
      <link href="/post/67ac9da7.html"/>
      <url>/post/67ac9da7.html</url>
      
        <content type="html"><![CDATA[<p>为 Array 对象扩展了一个迭代器之后，就可以利用这个法代器进一步拓展 Array 的方法，使其能够完成更多的实用功能。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.each = <span class="function"><span class="keyword">function</span>(<span class="params"> f </span>) </span>&#123;  <span class="comment">//数组法代器，扩展 Array 原型方法 </span></span><br><span class="line">    <span class="keyword">try</span>&#123;  <span class="comment">//异常处理，避免因为不可预测的错误导致系统崩溃 </span></span><br><span class="line">        <span class="keyword">this</span>.i || ( <span class="keyword">this</span>. i = <span class="number">0</span> ); <span class="comment">//定义临时变量，用来作为法代计数器 </span></span><br><span class="line">        <span class="keyword">if</span>( <span class="keyword">this</span>.length &gt; <span class="number">0</span> &amp;&amp; f.constructor == <span class="built_in">Function</span> ) &#123; </span><br><span class="line">            <span class="comment">//如果数组长度大于 0并且参数为函数</span></span><br><span class="line">            <span class="keyword">while</span>( <span class="keyword">this</span>.i &lt; <span class="keyword">this</span>.length ) &#123; <span class="comment">//遍历数组</span></span><br><span class="line">                <span class="keyword">var</span> e = <span class="keyword">this</span>[<span class="keyword">this</span>.i]; <span class="comment">//获取当前元素 </span></span><br><span class="line">                <span class="keyword">if</span>( e &amp;&amp; e.constructor == <span class="built_in">Array</span> ) &#123;  <span class="comment">//如果元素存在，且为数组</span></span><br><span class="line">                    e.each ( f ) ; <span class="comment">//递归调用法代器 </span></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;  <span class="comment">//否则，在元素上调用参数函数，并把元素值传递给函数 </span></span><br><span class="line">                    f.apply(e, [e]); </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">this</span>.i++;    <span class="comment">//递加计数器</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.i = <span class="literal">null</span>;     <span class="comment">//如果通历完毕，则清空计数器</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(err)&#123;       <span class="comment">//捕捉以后</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;      <span class="comment">//返回当前数组</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用该迭代器</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]];</span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"> x </span>) </span>&#123; </span><br><span class="line">    alert(x);</span><br><span class="line">&#125;</span><br><span class="line">a.each(f);     <span class="comment">//调用迭代器，为每个元素执行一次函数传递</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>call/apply/bind</title>
      <link href="/post/5e4b6aaf.html"/>
      <url>/post/5e4b6aaf.html</url>
      
        <content type="html"><![CDATA[<h3 id="使用-call-和-apply"><a href="#使用-call-和-apply" class="headerlink" title="使用 call() 和 apply()"></a>使用 call() 和 apply()</h3><p>call 和 apply是 Function 对象的原型方法，它们能够将特定函数当作一个方法绑定到指定对象上并进行调用。具体用法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>.<span class="title">call</span>(<span class="params">thisobj, args... </span>) </span></span><br><span class="line"><span class="function"><span class="title">function</span>.<span class="title">apply</span>(<span class="params">thisobj, args</span>)</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>其中参数 thisobj 表示this指定的对象，参数 args 表示要传递给被调用函数的参数。 call()方法只能接收多个参数列表， 而 apply()只能接收一个数组或者伪类数组，数组元素将作为参数传递给被调用的函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个add 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用call 来调用 add 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myAddCall</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//调用 add 方法 的 call 方法</span></span><br><span class="line">        <span class="keyword">return</span> add.call(<span class="keyword">this</span>, x, y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//apply 来调用 add 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myAddApply</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//调用 add 方法 的 applly 方法</span></span><br><span class="line">        <span class="keyword">return</span> add.apply(<span class="keyword">this</span>, [x, y]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(myAddCall(<span class="number">10</span>, <span class="number">20</span>));    <span class="comment">//输出结果30</span></span><br><span class="line">  </span><br><span class="line">    <span class="built_in">console</span>.log(myAddApply(<span class="number">20</span>, <span class="number">20</span>));  <span class="comment">//输出结果40</span></span><br></pre></td></tr></table></figure><h3 id="使用-bind"><a href="#使用-bind" class="headerlink" title="使用 bind()"></a>使用 bind()</h3><p>用来把函数绑定到指定对象上。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>.<span class="title">bind</span>(<span class="params">thisArg [, arg1[, arg2 [, argN]]]</span>)</span></span><br></pre></td></tr></table></figure><p>function：必需参数， 一个函数对象。 2.thisArg：必需参数，this关键字可在新函数中引用的对象。 3.arg1[, arg2[, argN]]：可选参数，要传递到新函数的参数的列表。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> checkNumericRange = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> value !== <span class="string">'number'</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value &gt;= <span class="keyword">this</span>.minimum &amp;&amp; value &lt;= <span class="keyword">this</span>.maximum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> range = &#123; <span class="attr">minimum</span>: <span class="number">10</span>, <span class="attr">maximum</span>: <span class="number">20</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> boundCheckNumericRange = checkNumericRange.bind(range); </span><br><span class="line"><span class="keyword">var</span> result = boundCheckNumericRange (<span class="number">12</span>); </span><br><span class="line"><span class="built_in">document</span>.write (result); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 arguments 对象</title>
      <link href="/post/f238c019.html"/>
      <url>/post/f238c019.html</url>
      
        <content type="html"><![CDATA[<h3 id="arguments-对象表示参数集合，它是一个伪类数组，拥有与数组相似的结构，可以通过数组下标的形式访问函数实参值，但是没有基础-Array-的原型方法"><a href="#arguments-对象表示参数集合，它是一个伪类数组，拥有与数组相似的结构，可以通过数组下标的形式访问函数实参值，但是没有基础-Array-的原型方法" class="headerlink" title="arguments 对象表示参数集合，它是一个伪类数组，拥有与数组相似的结构，可以通过数组下标的形式访问函数实参值，但是没有基础 Array 的原型方法"></a>arguments 对象表示参数集合，它是一个伪类数组，拥有与数组相似的结构，可以通过数组下标的形式访问函数实参值，但是没有基础 Array 的原型方法</h3><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数没有定义形参，但是在函数体内通过 arguments 对象可以获取传递给该函数的每个实参值。 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span> (<span class="params"></span>) </span>&#123; <span class="comment">//定义没有形参的函数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++ ) &#123;  <span class="comment">//循环读取函数的 arguments 对象 </span></span><br><span class="line">        alert(<span class="built_in">arguments</span>[i]);  <span class="comment">//显示指定下标的实参的值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">f(<span class="number">3</span>, <span class="number">3</span>, <span class="number">6</span>); <span class="comment">//逐个显示每个传递的实参</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">通过修改<span class="built_in">arguments</span>对象的 length属性值，也可以达到改变函数实参个数的目的。当 length 属性值增大时，则增加的实参值为 <span class="literal">undefined</span>，如果 length 属性值减小，则会丢弃<span class="built_in">arguments</span> 数据集合后面对应个数的元素。 </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="built_in">arguments</span>.length = <span class="number">2</span>  <span class="comment">//修改 arguments 对象的 length 属性值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++ ) &#123; </span><br><span class="line">        alert(<span class="built_in">arguments</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">f(<span class="number">3</span>, <span class="number">3</span>, <span class="number">6</span>); <span class="comment">//返回提示 3、 3</span></span><br></pre></td></tr></table></figure><h3 id="使用-callee-回调函数"><a href="#使用-callee-回调函数" class="headerlink" title="使用 callee 回调函数"></a>使用 callee 回调函数</h3><p>arguments 对象包含一个 callee 属性，它引用当前 arguments 对象所属的函数，使用该属性可以在函数体内调用函数自身（arguments.callee()）。在匿名函数中，callee 属性比较有用，利用它可以设计函数选代操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用 arguments.callee 获取匿名函数，然后通过函数的 length 属性获取函数形参个数，最后比较实参与形参个数以检测用户传递的参数是否符合要求。 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span> (<span class="params">x, y, z</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">var</span> a = <span class="built_in">arguments</span>.length; <span class="comment">//获取函数实参的个数</span></span><br><span class="line">    <span class="keyword">var</span> b =<span class="built_in">arguments</span>.callee.length; <span class="comment">//获取函数形参的个数 </span></span><br><span class="line">    <span class="keyword">if</span> (a != b) &#123; <span class="comment">//如果形参和实参个数不相等，则提示错误信息 </span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"传递的参数不匹配"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;    <span class="comment">//／如果形参和实参数目相同，则返回它们的和</span></span><br><span class="line">        <span class="keyword">return</span> x + y + z; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">alert(f(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)); <span class="comment">//返回值为 12</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js中点击返回顶部</title>
      <link href="/post/c788412.html"/>
      <url>/post/c788412.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">handleScrollTop()&#123;</span><br><span class="line">  <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, <span class="number">0</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript中new url()属性，轻松解析url地址</title>
      <link href="/post/3571313a.html"/>
      <url>/post/3571313a.html</url>
      
        <content type="html"><![CDATA[<h3 id="首先写一个假的地址（q-URLUtils-searchParams-amp-topic-api）相当于当前的window-location-href"><a href="#首先写一个假的地址（q-URLUtils-searchParams-amp-topic-api）相当于当前的window-location-href" class="headerlink" title="首先写一个假的地址（q=URLUtils.searchParams&amp;topic=api）相当于当前的window.location.href"></a>首先写一个假的地址（q=URLUtils.searchParams&amp;topic=api）相当于当前的window.location.href</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> urlParams = <span class="keyword">new</span> URL(<span class="built_in">window</span>.location.href);</span><br><span class="line">urlParams.searchParams.has(<span class="string">"topic"</span>) === <span class="literal">true</span>; <span class="comment">// true</span></span><br><span class="line">urlParams.searchParams.get(<span class="string">"topic"</span>) === <span class="string">"api"</span>; <span class="comment">// true</span></span><br><span class="line">urlParams.searchParams.getAll(<span class="string">"topic"</span>); <span class="comment">// ["api"]</span></span><br><span class="line">urlParams.searchParams.get(<span class="string">"foo"</span>) === <span class="string">""</span>; <span class="comment">// true</span></span><br><span class="line">urlParams.searchParams.append(<span class="string">"topic"</span>, <span class="string">"webdev"</span>);</span><br><span class="line">urlParams.searchParams.toString(); <span class="comment">// "q=URLUtils.searchParams&amp;topic=api&amp;topic=webdev"</span></span><br><span class="line">urlParams.searchParams.set(<span class="string">"topic"</span>, <span class="string">"More webdev"</span>);</span><br><span class="line">urlParams.searchParams.toString(); <span class="comment">// "q=URLUtils.searchParams&amp;topic=More+webdev"</span></span><br><span class="line">urlParams.searchParams.delete(<span class="string">"topic"</span>);</span><br><span class="line">urlParams.searchParams.toString(); <span class="comment">// "q=URLUtils.searchParams"</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js字符串数组[&#39;1&#39;,&#39;2&#39;,&#39;3&#39;]转number</title>
      <link href="/post/5ed73dad.html"/>
      <url>/post/5ed73dad.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>];</span><br><span class="line">arr.split(<span class="string">','</span>).map(<span class="built_in">Number</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组常用方法</title>
      <link href="/post/c58dd91c.html"/>
      <url>/post/c58dd91c.html</url>
      
        <content type="html"><![CDATA[<h3 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [...arr];  <span class="comment">//等同于 let arr2 = Array.from(arr);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];   <span class="comment">//a=1, b=2, c=3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [ , , third] = [<span class="string">"foo"</span>, <span class="string">"bar"</span>, <span class="string">"baz"</span>];  <span class="comment">//third="baz"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [head, ...tail] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];  <span class="comment">//head=1, tail=234</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, y, ...z] = [<span class="string">'a'</span>];  <span class="comment">//x=a, y=undefined, z=[], 如果解构不成功,变量的值就等于undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, y = <span class="string">'b'</span>] = [<span class="string">'a'</span>]; <span class="comment">// x='a', y='b',解构赋值允许指定默</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解构赋值超强</span></span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">    form: &#123; validateFields &#125;</span><br><span class="line">&#125; = <span class="keyword">this</span>;</span><br><span class="line">    validateFields(<span class="function">(<span class="params">err, values</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">          <span class="comment">// eslint-disable-next-line no-console</span></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"Received values of form: "</span>, values);    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Array-from：把类数组（获取一组元素、arguments…）对象转成数组，个人观点：具备length这个东西都可以使用Array-from-转数组"><a href="#Array-from：把类数组（获取一组元素、arguments…）对象转成数组，个人观点：具备length这个东西都可以使用Array-from-转数组" class="headerlink" title="Array.from：把类数组（获取一组元素、arguments…）对象转成数组，个人观点：具备length这个东西都可以使用Array.from()转数组"></a>Array.from：把类数组（获取一组元素、arguments…）对象转成数组，个人观点：具备length这个东西都可以使用Array.from()转数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> aLi = <span class="built_in">document</span>.querySelectorAll(<span class="string">'ul li'</span>);</span><br><span class="line"><span class="keyword">let</span> arrLi = <span class="built_in">Array</span>.from(aLi);  <span class="comment">//等同于let arrLi = [].slice.call(aLi);  ES5方法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> args = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(args)      <span class="comment">//[1,2,3,4,5]</span></span><br><span class="line">&#125;</span><br><span class="line">show(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'strive'</span>;</span><br><span class="line"><span class="keyword">let</span> arr = <span class="built_in">Array</span>.from(str);   <span class="comment">//等同于let arr = str.split('');</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);   <span class="comment">//[s,t,r,i,v,e]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> json = &#123;</span><br><span class="line">    <span class="number">0</span>:<span class="string">'apple'</span>,</span><br><span class="line">    <span class="number">1</span>:<span class="string">'banana'</span>,</span><br><span class="line">    <span class="number">2</span>:<span class="string">'orange'</span>,</span><br><span class="line">    length:<span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = <span class="built_in">Array</span>.from(json);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//['apple','banana','orange']，json对象必须有length，否则为[]</span></span><br></pre></td></tr></table></figure><h3 id="Array-of：把一组值，转成数组（没用过）"><a href="#Array-of：把一组值，转成数组（没用过）" class="headerlink" title="Array.of：把一组值，转成数组（没用过）"></a>Array.of：把一组值，转成数组（没用过）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="built_in">Array</span>.of(<span class="string">'apple'</span>,<span class="string">'banana'</span>,<span class="string">'orange'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//['apple','banana','orange']</span></span><br></pre></td></tr></table></figure><h3 id="Array-find：查找，找出第一个符合条件的数组成员，如果没找到返回undefined"><a href="#Array-find：查找，找出第一个符合条件的数组成员，如果没找到返回undefined" class="headerlink" title="Array.find：查找，找出第一个符合条件的数组成员，如果没找到返回undefined"></a>Array.find：查找，找出第一个符合条件的数组成员，如果没找到返回undefined</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">23</span>,<span class="number">900</span>,<span class="number">101</span>,<span class="number">80</span>,<span class="number">100</span>];</span><br><span class="line"><span class="keyword">let</span> res = arr.find(<span class="function">(<span class="params">val, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> val&gt;<span class="number">100</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(res);   <span class="comment">//返回数字900</span></span><br></pre></td></tr></table></figure><h3 id="Array-findIndex：找的是位置，没找到返回-1"><a href="#Array-findIndex：找的是位置，没找到返回-1" class="headerlink" title="Array.findIndex：找的是位置，没找到返回-1"></a>Array.findIndex：找的是位置，没找到返回-1</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">23</span>,<span class="number">900</span>,<span class="number">101</span>,<span class="number">80</span>,<span class="number">100</span>];</span><br><span class="line"><span class="keyword">let</span> res = arr.findIndex(<span class="function">(<span class="params">val, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> val&gt;<span class="number">100</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(res);   <span class="comment">//返回数字1</span></span><br></pre></td></tr></table></figure><h3 id="Array-fill：Array-fill-填充的东西-开始位置-结束位置-（没用过）"><a href="#Array-fill：Array-fill-填充的东西-开始位置-结束位置-（没用过）" class="headerlink" title="Array.fill：Array.fill(填充的东西,开始位置,结束位置)（没用过）"></a>Array.fill：Array.fill(填充的东西,开始位置,结束位置)（没用过）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>);</span><br><span class="line">arr.fill(<span class="string">'默认值'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//['默认值'......]10个默认值</span></span><br><span class="line">arr.fill(<span class="string">'默认值'</span>,<span class="number">1</span>,<span class="number">3</span>);   <span class="comment">//1起始位置，3结束位置</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);  <span class="comment">//下标为1和下标为2的是默认值，其他为空</span></span><br></pre></td></tr></table></figure><h3 id="Array-includes：返回布尔值true-false，跟indexOf类似"><a href="#Array-includes：返回布尔值true-false，跟indexOf类似" class="headerlink" title="Array.includes：返回布尔值true/false，跟indexOf类似"></a>Array.includes：返回布尔值true/false，跟indexOf类似</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'apple'</span>,<span class="string">'banana'</span>,<span class="string">'orange'</span>];</span><br><span class="line"><span class="keyword">let</span> b = arr.includes(<span class="string">'banana'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(b);   <span class="comment">//返回布尔值true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> es6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>antd中的form表单initialValue导致数据不更新问题</title>
      <link href="/post/7a7df4a6.html"/>
      <url>/post/7a7df4a6.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>初步理解 ： initialValue就是所谓的defaultValue,只会在第一次赋值的时候改变，却又有一些不同，因为 initialValue又会因其他改动而改变。 然而当获取的数据重新上来要渲染的时候 ，initialValue的值却又不改变，所以 让人觉得很是捉摸不透。</p><a id="more"></a><p>解决：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.props.form.resetFields();</span><br></pre></td></tr></table></figure><p>例：如果第一步操作执行的是修改操作，一些默认值填充上去，如果不作处理，第二部执行新增操作的时候，会把第一个默认的值带着，导致新增弹框弹出来的时候form表单中就是数值，效果体验特别不好，</p><p>后面发现在Modal文件里面添加componentWillReceiveProps中处理报表重置，就可以刷新form表单</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">componentWillReceiveProps(nextProps) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!nextProps.modal.modalUpdateDetail) &#123;</span><br><span class="line">      <span class="keyword">this</span>.props.form.resetFields();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后来还是会在同样的坑里面跳 但这回不是在Modal里的Form,而是在类似TAB组件切换数据的时候，this.state的内容变了，但是render的initialValue还是保留着原来的数据 解决方法 1 我第一想到的是强制刷新，window.location.reload() 但这样的办法并不是理想的效果</p><p>2 治根还得治本，我知道是initialValue的问题 但如果参考原来的在componentWillReceiveProps里面重置表单数据，会出现其他各种问题，因为 componentWillReceiveProps 这个函数你可能因为别的原因触发了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">componentWillReceiveProps(nextProps) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!nextProps.modal.modalUpdateDetail) &#123;</span><br><span class="line">      <span class="keyword">this</span>.props.form.resetFields();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后来想着，既然是因为initialValue已经有了初始化，那在切换操作的时候，将它清除掉好了，所以在离开的操作函数里添加了 this.props.form.resetFields();</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> ant-design-vue踩过的坑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>antd-vue中给table表格整行加点击事件</title>
      <link href="/post/3b94f69c.html"/>
      <url>/post/3b94f69c.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a-table</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:columns</span>=<span class="string">"columns"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:dataSource</span>=<span class="string">"data"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:loading</span>=<span class="string">"loading"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:pagination</span>=<span class="string">"pagination"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:rowKey</span>=<span class="string">"record =&gt; record.id"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">change</span>=<span class="string">"paginationChange"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">bordered</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:customRow</span>=<span class="string">"click"</span>  // 这个是重点，主要是给<span class="attr">table</span>添加属性的作用</span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"></span><br><span class="line">    // 内容</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">a-table</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    click(record, index)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            on: &#123;</span><br><span class="line">               click: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(record,index)</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> ant-design-vue踩过的坑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>form表单label标签for导致点击文字触发输入框解决方案</title>
      <link href="/post/2abc5415.html"/>
      <url>/post/2abc5415.html</url>
      
        <content type="html"><![CDATA[<p><img src="/post/2abc5415/a_form_img.png" alt></p><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a-form-item</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:label</span>=<span class="string">"label+'图片'"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:label-col</span>=<span class="string">"&#123; span: 2 &#125;"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:wrapper-col</span>=<span class="string">"&#123; span: 22 &#125;"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">"picture"</span>    // 只需加个与校验(<span class="attr">roomPicture</span>)不同名的<span class="attr">id</span>即可</span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a-upload</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:action</span>=<span class="string">"'/platformApi/file/uploadFile'"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:beforeUpload</span>=<span class="string">"beforeUpload"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:data</span>=<span class="string">"dataObj"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:disabled</span>=<span class="string">"type==='check'"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:headers</span>=<span class="string">"headers"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:showUploadList</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">change</span>=<span class="string">"handleChange($event,'place')"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">listType</span>=<span class="string">"picture-card"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">"multipartFile"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-decorator</span>=<span class="string">"['roomPicture',&#123;rules: [&#123; required: true, message: '请选择房间图片' &#125;]&#125;]"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:src</span>=<span class="string">"imageUrlForPlace"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">alt</span>=<span class="string">"avatar"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">"max-width:400px;"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-if</span>=<span class="string">"imageUrlForPlace"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a-icon</span> <span class="attr">:type</span>=<span class="string">"loadingForImgForPlace ? 'loading' : 'plus'"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ant-upload-text"</span>&gt;</span>Upload<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a-upload</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> ant-design-vue踩过的坑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
